// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Channels;

///<summary>
/// Set a <a href="https://corefork.telegram.org/api/custom-emoji">custom emoji stickerset</a> for supergroups. Only usable after reaching at least the <a href="https://corefork.telegram.org/api/boost">boost level </a> specified in the <a href="https://corefork.telegram.org/api/config#group-emoji-stickers-level-min"><code>group_emoji_stickers_level_min</code> </a> config parameter.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CHANNEL_INVALID The provided channel is invalid.
/// See <a href="https://corefork.telegram.org/method/channels.setEmojiStickers" />
///</summary>
[TlObject(0x3cd930b7)]
public sealed class RequestSetEmojiStickers : IRequest<IBool>
{
    public uint ConstructorId => 0x3cd930b7;
    ///<summary>
    /// The supergroup
    /// See <a href="https://corefork.telegram.org/type/InputChannel" />
    ///</summary>
    public MyTelegram.Schema.IInputChannel Channel { get; set; }

    ///<summary>
    /// The custom emoji stickerset to associate to the supergroup
    /// See <a href="https://corefork.telegram.org/type/InputStickerSet" />
    ///</summary>
    public MyTelegram.Schema.IInputStickerSet Stickerset { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Channel);
        writer.Write(Stickerset);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Channel = buffer.Read<MyTelegram.Schema.IInputChannel>();
        Stickerset = buffer.Read<MyTelegram.Schema.IInputStickerSet>();
    }
}
