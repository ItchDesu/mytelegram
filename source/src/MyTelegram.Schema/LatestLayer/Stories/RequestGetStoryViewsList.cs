// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Stories;

///<summary>
/// Obtain the list of users that have viewed a specific <a href="https://corefork.telegram.org/api/stories">story we posted</a>
/// <para>Possible errors</para>
/// Code Type Description
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// 400 STORY_ID_INVALID The specified story ID is invalid.
/// See <a href="https://corefork.telegram.org/method/stories.getStoryViewsList" />
///</summary>
[TlObject(0x7ed23c57)]
public sealed class RequestGetStoryViewsList : IRequest<MyTelegram.Schema.Stories.IStoryViewsList>
{
    public uint ConstructorId => 0x7ed23c57;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether to only fetch view reaction/views made by our <a href="https://corefork.telegram.org/api/contacts">contacts</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool JustContacts { get; set; }

    ///<summary>
    /// Whether to return <a href="https://corefork.telegram.org/constructor/storyView">storyView</a> info about users that reacted to the story (i.e. if set, the server will first sort results by view date as usual, and then also additionally sort the list by putting <a href="https://corefork.telegram.org/constructor/storyView">storyView</a>s with an associated reaction first in the list). Ignored if <code>forwards_first</code> is set.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReactionsFirst { get; set; }

    ///<summary>
    /// If set, returns forwards and reposts first, then reactions, then other views; otherwise returns interactions sorted just by interaction date.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ForwardsFirst { get; set; }

    ///<summary>
    /// Peer where the story was posted
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// Search for specific peers
    ///</summary>
    public string? Q { get; set; }

    ///<summary>
    /// Story ID
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// Offset for pagination, obtained from <a href="https://corefork.telegram.org/constructor/stories.storyViewsList">stories.storyViewsList</a>.<code>next_offset</code>
    ///</summary>
    public string Offset { get; set; }

    ///<summary>
    /// Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a>
    ///</summary>
    public int Limit { get; set; }

    public void ComputeFlag()
    {
        if (JustContacts) { Flags = Flags.SetBit(0); }
        if (ReactionsFirst) { Flags = Flags.SetBit(2); }
        if (ForwardsFirst) { Flags = Flags.SetBit(3); }
        if (Q != null) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        if (Flags.IsBitSet(1)) { writer.Write(Q); }
        writer.Write(Id);
        writer.Write(Offset);
        writer.Write(Limit);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { JustContacts = true; }
        if (Flags.IsBitSet(2)) { ReactionsFirst = true; }
        if (Flags.IsBitSet(3)) { ForwardsFirst = true; }
        Peer = buffer.Read<MyTelegram.Schema.IInputPeer>();
        if (Flags.IsBitSet(1)) { Q = buffer.ReadString(); }
        Id = buffer.ReadInt32();
        Offset = buffer.ReadString();
        Limit = buffer.ReadInt32();
    }
}
