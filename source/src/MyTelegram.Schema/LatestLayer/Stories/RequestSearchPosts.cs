// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Stories;

///<summary>
/// Globally search for <a href="https://corefork.telegram.org/api/stories">stories</a> using a hashtag or a <a href="https://corefork.telegram.org/api/stories#location-tags">location media area</a>, see <a href="https://corefork.telegram.org/api/stories#searching-stories">here </a> for more info on the full flow.Either <code>hashtag</code> <strong>or</strong> <code>area</code> <strong>must</strong> be set when invoking the method.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 HASHTAG_INVALID The specified hashtag is invalid.
/// See <a href="https://corefork.telegram.org/method/stories.searchPosts" />
///</summary>
[TlObject(0xd1810907)]
public sealed class RequestSearchPosts : IRequest<MyTelegram.Schema.Stories.IFoundStories>
{
    public uint ConstructorId => 0xd1810907;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Hashtag (without the <code>#</code>)
    ///</summary>
    public string? Hashtag { get; set; }

    ///<summary>
    /// A <a href="https://corefork.telegram.org/constructor/mediaAreaGeoPoint">mediaAreaGeoPoint</a> or a <a href="https://corefork.telegram.org/constructor/mediaAreaVenue">mediaAreaVenue</a>.  <br>Note <a href="https://corefork.telegram.org/constructor/mediaAreaGeoPoint">mediaAreaGeoPoint</a> areas may be searched only if they have an associated <code>address</code>.
    /// See <a href="https://corefork.telegram.org/type/MediaArea" />
    ///</summary>
    public MyTelegram.Schema.IMediaArea? Area { get; set; }

    ///<summary>
    /// If set, returns only stories posted by this peer.
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer? Peer { get; set; }

    ///<summary>
    /// Offset for <a href="https://corefork.telegram.org/api/offsets">pagination</a>: initially an empty string, then the <code>next_offset</code> from the previously returned <a href="https://corefork.telegram.org/constructor/stories.foundStories">stories.foundStories</a>.
    ///</summary>
    public string Offset { get; set; }

    ///<summary>
    /// Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a>
    ///</summary>
    public int Limit { get; set; }

    public void ComputeFlag()
    {
        if (Hashtag != null) { Flags = Flags.SetBit(0); }
        if (Area != null) { Flags = Flags.SetBit(1); }
        if (Peer != null) { Flags = Flags.SetBit(2); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(0)) { writer.Write(Hashtag); }
        if (Flags.IsBitSet(1)) { writer.Write(Area); }
        if (Flags.IsBitSet(2)) { writer.Write(Peer); }
        writer.Write(Offset);
        writer.Write(Limit);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Hashtag = buffer.ReadString(); }
        if (Flags.IsBitSet(1)) { Area = buffer.Read<MyTelegram.Schema.IMediaArea>(); }
        if (Flags.IsBitSet(2)) { Peer = buffer.Read<MyTelegram.Schema.IInputPeer>(); }
        Offset = buffer.ReadString();
        Limit = buffer.ReadInt32();
    }
}
