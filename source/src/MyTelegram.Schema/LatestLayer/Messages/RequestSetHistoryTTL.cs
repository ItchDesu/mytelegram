// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Set maximum Time-To-Live of all messages in the specified chat
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CHAT_NOT_MODIFIED No changes were made to chat information because the new information you passed is identical to the current information.
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// 400 TTL_PERIOD_INVALID The specified TTL period is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.setHistoryTTL" />
///</summary>
[TlObject(0xb80e5fe4)]
public sealed class RequestSetHistoryTTL : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0xb80e5fe4;
    ///<summary>
    /// The dialog
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// Automatically delete all messages sent in the chat after this many seconds
    ///</summary>
    public int Period { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Peer);
        writer.Write(Period);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Peer = buffer.Read<MyTelegram.Schema.IInputPeer>();
        Period = buffer.ReadInt32();
    }
}
