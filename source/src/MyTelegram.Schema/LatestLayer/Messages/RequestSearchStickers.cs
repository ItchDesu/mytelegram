// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// See <a href="https://corefork.telegram.org/method/messages.searchStickers" />
///</summary>
[TlObject(0x29b1c66a)]
public sealed class RequestSearchStickers : IRequest<MyTelegram.Schema.Messages.IFoundStickers>
{
    public uint ConstructorId => 0x29b1c66a;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// &nbsp;
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Emojis { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string Q { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public string Emoticon { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public TVector<string> LangCode { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int Offset { get; set; }

    ///<summary>
    /// Maximum number of results to return, <a href="https://corefork.telegram.org/api/offsets">see pagination</a>
    ///</summary>
    public int Limit { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash used for caching, for more info click here</a>.
    ///</summary>
    public long Hash { get; set; }

    public void ComputeFlag()
    {
        if (Emojis) { Flags = Flags.SetBit(0); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Q);
        writer.Write(Emoticon);
        writer.Write(LangCode);
        writer.Write(Offset);
        writer.Write(Limit);
        writer.Write(Hash);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Emojis = true; }
        Q = buffer.ReadString();
        Emoticon = buffer.ReadString();
        LangCode = buffer.Read<TVector<string>>();
        Offset = buffer.ReadInt32();
        Limit = buffer.ReadInt32();
        Hash = buffer.ReadInt64();
    }
}
