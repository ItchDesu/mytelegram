// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// See <a href="https://corefork.telegram.org/constructor/messages.foundStickers" />
///</summary>
[TlObject(0x82c9e290)]
public sealed class TFoundStickers : IFoundStickers
{
    public uint ConstructorId => 0x82c9e290;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public int? NextOffset { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash used for caching, for more info click here</a>
    ///</summary>
    public long Hash { get; set; }

    ///<summary>
    /// &nbsp;
    ///</summary>
    public TVector<MyTelegram.Schema.IDocument> Stickers { get; set; }

    public void ComputeFlag()
    {
        if (/*NextOffset != 0 && */NextOffset.HasValue) { Flags = Flags.SetBit(0); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(0)) { writer.Write(NextOffset.Value); }
        writer.Write(Hash);
        writer.Write(Stickers);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { NextOffset = buffer.ReadInt32(); }
        Hash = buffer.ReadInt64();
        Stickers = buffer.Read<TVector<MyTelegram.Schema.IDocument>>();
    }
}