// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Deletes messages forwarded from a specific peer to <a href="https://corefork.telegram.org/api/saved-messages">saved messages </a>.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.deleteSavedHistory" />
///</summary>
[TlObject(0x4dc5085f)]
public sealed class RequestDeleteSavedHistory : IRequest<MyTelegram.Schema.Messages.IAffectedHistory>
{
    public uint ConstructorId => 0x4dc5085f;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }
    public MyTelegram.Schema.IInputPeer? ParentPeer { get; set; }

    ///<summary>
    /// Peer, whose messages will be deleted from <a href="https://corefork.telegram.org/api/saved-messages">saved messages </a>
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// Maximum ID of message to delete
    ///</summary>
    public int MaxId { get; set; }

    ///<summary>
    /// Delete all messages newer than this UNIX timestamp
    ///</summary>
    public int? MinDate { get; set; }

    ///<summary>
    /// Delete all messages older than this UNIX timestamp
    ///</summary>
    public int? MaxDate { get; set; }

    public void ComputeFlag()
    {
        if (ParentPeer != null) { Flags = Flags.SetBit(0); }
        if (/*MinDate != 0 && */MinDate.HasValue) { Flags = Flags.SetBit(2); }
        if (/*MaxDate != 0 && */MaxDate.HasValue) { Flags = Flags.SetBit(3); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(0)) { writer.Write(ParentPeer); }
        writer.Write(Peer);
        writer.Write(MaxId);
        if (Flags.IsBitSet(2)) { writer.Write(MinDate.Value); }
        if (Flags.IsBitSet(3)) { writer.Write(MaxDate.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { ParentPeer = buffer.Read<MyTelegram.Schema.IInputPeer>(); }
        Peer = buffer.Read<MyTelegram.Schema.IInputPeer>();
        MaxId = buffer.ReadInt32();
        if (Flags.IsBitSet(2)) { MinDate = buffer.ReadInt32(); }
        if (Flags.IsBitSet(3)) { MaxDate = buffer.ReadInt32(); }
    }
}
