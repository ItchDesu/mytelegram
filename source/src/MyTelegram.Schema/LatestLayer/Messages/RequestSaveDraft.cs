// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Save a message <a href="https://corefork.telegram.org/api/drafts">draft</a> associated to a chat.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 ENTITY_BOUNDS_INVALID A specified <a href="https://corefork.telegram.org/api/entities#entity-length">entity offset or length</a> is invalid, see <a href="https://corefork.telegram.org/api/entities#entity-length">here&nbsp;</a> for info on how to properly compute the entity offset/length.
/// 400 MSG_ID_INVALID Invalid message ID provided.
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.saveDraft" />
///</summary>
[TlObject(0x54ae308e)]
public sealed class RequestSaveDraft : IRequest<IBool>
{
    public uint ConstructorId => 0x54ae308e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Disable generation of the webpage preview
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NoWebpage { get; set; }

    ///<summary>
    /// If set, any eventual webpage preview will be shown on top of the message instead of at the bottom.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool InvertMedia { get; set; }

    ///<summary>
    /// If set, indicates that the message should be sent in reply to the specified message or story.
    /// See <a href="https://corefork.telegram.org/type/InputReplyTo" />
    ///</summary>
    public MyTelegram.Schema.IInputReplyTo? ReplyTo { get; set; }

    ///<summary>
    /// Destination of the message that should be sent
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// The draft
    ///</summary>
    public string Message { get; set; }

    ///<summary>
    /// Message <a href="https://corefork.telegram.org/api/entities">entities</a> for styled text
    ///</summary>
    public TVector<MyTelegram.Schema.IMessageEntity>? Entities { get; set; }

    ///<summary>
    /// Attached media
    /// See <a href="https://corefork.telegram.org/type/InputMedia" />
    ///</summary>
    public MyTelegram.Schema.IInputMedia? Media { get; set; }

    ///<summary>
    /// Specifies a <a href="https://corefork.telegram.org/api/effects">message effect </a> to use for the message.
    ///</summary>
    public long? Effect { get; set; }
    public MyTelegram.Schema.ISuggestedPost? SuggestedPost { get; set; }

    public void ComputeFlag()
    {
        if (NoWebpage) { Flags = Flags.SetBit(1); }
        if (InvertMedia) { Flags = Flags.SetBit(6); }
        if (ReplyTo != null) { Flags = Flags.SetBit(4); }
        if (Entities?.Count > 0) { Flags = Flags.SetBit(3); }
        if (Media != null) { Flags = Flags.SetBit(5); }
        if (/*Effect != 0 &&*/ Effect.HasValue) { Flags = Flags.SetBit(7); }
        if (SuggestedPost != null) { Flags = Flags.SetBit(8); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(4)) { writer.Write(ReplyTo); }
        writer.Write(Peer);
        writer.Write(Message);
        if (Flags.IsBitSet(3)) { writer.Write(Entities); }
        if (Flags.IsBitSet(5)) { writer.Write(Media); }
        if (Flags.IsBitSet(7)) { writer.Write(Effect.Value); }
        if (Flags.IsBitSet(8)) { writer.Write(SuggestedPost); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(1)) { NoWebpage = true; }
        if (Flags.IsBitSet(6)) { InvertMedia = true; }
        if (Flags.IsBitSet(4)) { ReplyTo = buffer.Read<MyTelegram.Schema.IInputReplyTo>(); }
        Peer = buffer.Read<MyTelegram.Schema.IInputPeer>();
        Message = buffer.ReadString();
        if (Flags.IsBitSet(3)) { Entities = buffer.Read<TVector<MyTelegram.Schema.IMessageEntity>>(); }
        if (Flags.IsBitSet(5)) { Media = buffer.Read<MyTelegram.Schema.IInputMedia>(); }
        if (Flags.IsBitSet(7)) { Effect = buffer.ReadInt64(); }
        if (Flags.IsBitSet(8)) { SuggestedPost = buffer.Read<MyTelegram.Schema.ISuggestedPost>(); }
    }
}
