// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Query an inline bot
/// <para>Possible errors</para>
/// Code Type Description
/// 400 BOT_INLINE_DISABLED This bot can't be used in inline mode.
/// 400 BOT_INVALID This is not a valid bot.
/// 400 BOT_RESPONSE_TIMEOUT A timeout occurred while fetching data from the bot.
/// 400 CHANNEL_INVALID The provided channel is invalid.
/// 406 CHANNEL_PRIVATE You haven't joined this channel/supergroup.
/// 400 INPUT_USER_DEACTIVATED The specified user was deleted.
/// 400 MSG_ID_INVALID Invalid message ID provided.
/// -503 Timeout Timeout while fetching data.
/// See <a href="https://corefork.telegram.org/method/messages.getInlineBotResults" />
///</summary>
[TlObject(0x514e999d)]
public sealed class RequestGetInlineBotResults : IRequest<MyTelegram.Schema.Messages.IBotResults>
{
    public uint ConstructorId => 0x514e999d;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// The bot to query
    /// See <a href="https://corefork.telegram.org/type/InputUser" />
    ///</summary>
    public MyTelegram.Schema.IInputUser Bot { get; set; }

    ///<summary>
    /// The currently opened chat
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// The geolocation, if requested
    /// See <a href="https://corefork.telegram.org/type/InputGeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IInputGeoPoint? GeoPoint { get; set; }

    ///<summary>
    /// The query
    ///</summary>
    public string Query { get; set; }

    ///<summary>
    /// The offset within the results, will be passed directly as-is to the bot.
    ///</summary>
    public string Offset { get; set; }

    public void ComputeFlag()
    {
        if (GeoPoint != null) { Flags = Flags.SetBit(0); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Bot);
        writer.Write(Peer);
        if (Flags.IsBitSet(0)) { writer.Write(GeoPoint); }
        writer.Write(Query);
        writer.Write(Offset);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Bot = buffer.Read<MyTelegram.Schema.IInputUser>();
        Peer = buffer.Read<MyTelegram.Schema.IInputPeer>();
        if (Flags.IsBitSet(0)) { GeoPoint = buffer.Read<MyTelegram.Schema.IInputGeoPoint>(); }
        Query = buffer.ReadString();
        Offset = buffer.ReadString();
    }
}
