// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Get the number of results that would be found by a <a href="https://corefork.telegram.org/method/messages.search">messages.search</a> call with the same parameters
/// <para>Possible errors</para>
/// Code Type Description
/// 400 PEER_ID_INVALID The provided peer id is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.getSearchCounters" />
///</summary>
[TlObject(0x1bbcf300)]
public sealed class RequestGetSearchCounters : IRequest<TVector<MyTelegram.Schema.Messages.ISearchCounter>>
{
    public uint ConstructorId => 0x1bbcf300;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Peer where to search
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// Search within the <a href="https://corefork.telegram.org/api/saved-messages">saved message dialog </a> with this ID.
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer? SavedPeerId { get; set; }

    ///<summary>
    /// If set, consider only messages within the specified <a href="https://corefork.telegram.org/api/forum#forum-topics">forum topic</a>
    ///</summary>
    public int? TopMsgId { get; set; }

    ///<summary>
    /// Search filters
    ///</summary>
    public TVector<MyTelegram.Schema.IMessagesFilter> Filters { get; set; }

    public void ComputeFlag()
    {
        if (SavedPeerId != null) { Flags = Flags.SetBit(2); }
        if (/*TopMsgId != 0 && */TopMsgId.HasValue) { Flags = Flags.SetBit(0); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        if (Flags.IsBitSet(2)) { writer.Write(SavedPeerId); }
        if (Flags.IsBitSet(0)) { writer.Write(TopMsgId.Value); }
        writer.Write(Filters);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Peer = buffer.Read<MyTelegram.Schema.IInputPeer>();
        if (Flags.IsBitSet(2)) { SavedPeerId = buffer.Read<MyTelegram.Schema.IInputPeer>(); }
        if (Flags.IsBitSet(0)) { TopMsgId = buffer.ReadInt32(); }
        Filters = buffer.Read<TVector<MyTelegram.Schema.IMessagesFilter>>();
    }
}
