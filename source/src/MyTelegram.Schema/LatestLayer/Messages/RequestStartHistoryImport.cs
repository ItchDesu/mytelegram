// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Messages;

///<summary>
/// Complete the <a href="https://corefork.telegram.org/api/import">history import process</a>, importing all messages into the chat.<br>
/// To be called only after initializing the import with <a href="https://corefork.telegram.org/method/messages.initHistoryImport">messages.initHistoryImport</a> and uploading all files using <a href="https://corefork.telegram.org/method/messages.uploadImportedMedia">messages.uploadImportedMedia</a>.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 IMPORT_ID_INVALID The specified import ID is invalid.
/// See <a href="https://corefork.telegram.org/method/messages.startHistoryImport" />
///</summary>
[TlObject(0xb43df344)]
public sealed class RequestStartHistoryImport : IRequest<IBool>
{
    public uint ConstructorId => 0xb43df344;
    ///<summary>
    /// The Telegram chat where the messages should be <a href="https://corefork.telegram.org/api/import">imported, click here for more info </a>
    /// See <a href="https://corefork.telegram.org/type/InputPeer" />
    ///</summary>
    public MyTelegram.Schema.IInputPeer Peer { get; set; }

    ///<summary>
    /// Identifier of a history import session, returned by <a href="https://corefork.telegram.org/method/messages.initHistoryImport">messages.initHistoryImport</a>.
    ///</summary>
    public long ImportId { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Peer);
        writer.Write(ImportId);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Peer = buffer.Read<MyTelegram.Schema.IInputPeer>();
        ImportId = buffer.ReadInt64();
    }
}
