// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// Configuration for two-factor authorization
/// See <a href="https://corefork.telegram.org/constructor/account.password" />
///</summary>
[TlObject(0x957b50fb)]
public sealed class TPassword : IPassword
{
    public uint ConstructorId => 0x957b50fb;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether the user has a recovery method configured
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasRecovery { get; set; }

    ///<summary>
    /// Whether telegram <a href="https://corefork.telegram.org/passport">passport</a> is enabled
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasSecureValues { get; set; }

    ///<summary>
    /// Whether the user has a password
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasPassword { get; set; }

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/srp">KDF algorithm for SRP two-factor authentication</a> of the current password
    /// See <a href="https://corefork.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo? CurrentAlgo { get; set; }

    ///<summary>
    /// Srp B param for <a href="https://corefork.telegram.org/api/srp">SRP authorization</a>
    ///</summary>
    public ReadOnlyMemory<byte>? SrpB { get; set; }

    ///<summary>
    /// Srp ID param for <a href="https://corefork.telegram.org/api/srp">SRP authorization</a>
    ///</summary>
    public long? SrpId { get; set; }

    ///<summary>
    /// Text hint for the password
    ///</summary>
    public string? Hint { get; set; }

    ///<summary>
    /// A <a href="https://corefork.telegram.org/api/srp#email-verification">password recovery email</a> with the specified <a href="https://corefork.telegram.org/api/pattern">pattern</a> is still awaiting verification
    ///</summary>
    public string? EmailUnconfirmedPattern { get; set; }

    ///<summary>
    /// The <a href="https://corefork.telegram.org/api/srp">KDF algorithm for SRP two-factor authentication</a> to use when creating new passwords
    /// See <a href="https://corefork.telegram.org/type/PasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.IPasswordKdfAlgo NewAlgo { get; set; }

    ///<summary>
    /// The KDF algorithm for telegram <a href="https://corefork.telegram.org/passport">passport</a>
    /// See <a href="https://corefork.telegram.org/type/SecurePasswordKdfAlgo" />
    ///</summary>
    public MyTelegram.Schema.ISecurePasswordKdfAlgo NewSecureAlgo { get; set; }

    ///<summary>
    /// Secure random string
    ///</summary>
    public ReadOnlyMemory<byte> SecureRandom { get; set; }

    ///<summary>
    /// The 2FA password will be automatically removed at this date, unless the user cancels the operation
    ///</summary>
    public int? PendingResetDate { get; set; }

    ///<summary>
    /// A verified login email with the specified <a href="https://corefork.telegram.org/api/pattern">pattern</a> is configured
    ///</summary>
    public string? LoginEmailPattern { get; set; }

    public void ComputeFlag()
    {
        if (HasRecovery) { Flags = Flags.SetBit(0); }
        if (HasSecureValues) { Flags = Flags.SetBit(1); }
        if (HasPassword) { Flags = Flags.SetBit(2); }
        if (CurrentAlgo != null) { Flags = Flags.SetBit(2); }
        if (SrpB != null) { Flags = Flags.SetBit(2); }
        if (/*SrpId != 0 &&*/ SrpId.HasValue) { Flags = Flags.SetBit(2); }
        if (Hint != null) { Flags = Flags.SetBit(3); }
        if (EmailUnconfirmedPattern != null) { Flags = Flags.SetBit(4); }
        if (/*PendingResetDate != 0 && */PendingResetDate.HasValue) { Flags = Flags.SetBit(5); }
        if (LoginEmailPattern != null) { Flags = Flags.SetBit(6); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(2)) { writer.Write(CurrentAlgo); }
        if (Flags.IsBitSet(2)) { writer.Write(SrpB); }
        if (Flags.IsBitSet(2)) { writer.Write(SrpId.Value); }
        if (Flags.IsBitSet(3)) { writer.Write(Hint); }
        if (Flags.IsBitSet(4)) { writer.Write(EmailUnconfirmedPattern); }
        writer.Write(NewAlgo);
        writer.Write(NewSecureAlgo);
        writer.Write(SecureRandom);
        if (Flags.IsBitSet(5)) { writer.Write(PendingResetDate.Value); }
        if (Flags.IsBitSet(6)) { writer.Write(LoginEmailPattern); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { HasRecovery = true; }
        if (Flags.IsBitSet(1)) { HasSecureValues = true; }
        if (Flags.IsBitSet(2)) { HasPassword = true; }
        if (Flags.IsBitSet(2)) { CurrentAlgo = buffer.Read<MyTelegram.Schema.IPasswordKdfAlgo>(); }
        if (Flags.IsBitSet(2)) { SrpB = buffer.ReadBytes(); }
        if (Flags.IsBitSet(2)) { SrpId = buffer.ReadInt64(); }
        if (Flags.IsBitSet(3)) { Hint = buffer.ReadString(); }
        if (Flags.IsBitSet(4)) { EmailUnconfirmedPattern = buffer.ReadString(); }
        NewAlgo = buffer.Read<MyTelegram.Schema.IPasswordKdfAlgo>();
        NewSecureAlgo = buffer.Read<MyTelegram.Schema.ISecurePasswordKdfAlgo>();
        SecureRandom = buffer.ReadBytes();
        if (Flags.IsBitSet(5)) { PendingResetDate = buffer.ReadInt32(); }
        if (Flags.IsBitSet(6)) { LoginEmailPattern = buffer.ReadString(); }
    }
}