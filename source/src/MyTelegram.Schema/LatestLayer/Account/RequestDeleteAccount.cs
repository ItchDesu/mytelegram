// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Account;

///<summary>
/// Delete the user's account from the telegram servers.Can also be used to delete the account of a user that provided the login code, but forgot the 2FA password and no recovery method is configured, see <a href="https://corefork.telegram.org/api/srp#password-recovery">here </a> for more info on password recovery, and <a href="https://corefork.telegram.org/api/account-deletion">here </a> for more info on account deletion.
/// <para>Possible errors</para>
/// Code Type Description
/// 420 2FA_CONFIRM_WAIT_%d Since this account is active and protected by a 2FA password, we will delete it in 1 week for security purposes. You can cancel this process at any time, you'll be able to reset your account in %d seconds.
/// See <a href="https://corefork.telegram.org/method/account.deleteAccount" />
///</summary>
[TlObject(0xa2c0cf74)]
public sealed class RequestDeleteAccount : IRequest<IBool>
{
    public uint ConstructorId => 0xa2c0cf74;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Why is the account being deleted, can be empty
    ///</summary>
    public string Reason { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/srp">2FA password</a>: this field can be omitted even for accounts with 2FA enabled: in this case account account deletion will be delayed by 7 days <a href="https://corefork.telegram.org/api/account-deletion">as specified in the docs </a>
    /// See <a href="https://corefork.telegram.org/type/InputCheckPasswordSRP" />
    ///</summary>
    public MyTelegram.Schema.IInputCheckPasswordSRP? Password { get; set; }

    public void ComputeFlag()
    {
        if (Password != null) { Flags = Flags.SetBit(0); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Reason);
        if (Flags.IsBitSet(0)) { writer.Write(Password); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Reason = buffer.ReadString();
        if (Flags.IsBitSet(0)) { Password = buffer.Read<MyTelegram.Schema.IInputCheckPasswordSRP>(); }
    }
}
