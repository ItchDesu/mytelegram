// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Payments;

///<summary>
/// Contains info about an ongoing <a href="https://corefork.telegram.org/api/giveaways">giveaway</a>.If neither the <code>participating</code>, <code>joined_too_early_date</code>, <code>admin_disallowed_chat_id</code> or <code>disallowed_country</code> flags are set, the user is not currently participating in the giveaway but could participate by joining all the channels specified in the <a href="https://corefork.telegram.org/constructor/messageMediaGiveaway">messageMediaGiveaway</a>.<code>channels</code> field.
/// See <a href="https://corefork.telegram.org/constructor/payments.giveawayInfo" />
///</summary>
[TlObject(0x4367daa0)]
public sealed class TGiveawayInfo : IGiveawayInfo
{
    public uint ConstructorId => 0x4367daa0;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// The current user is participating in the giveaway.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Participating { get; set; }

    ///<summary>
    /// If set, the giveaway has ended and the results are being prepared.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PreparingResults { get; set; }

    ///<summary>
    /// When was the giveaway started
    ///</summary>
    public int StartDate { get; set; }

    ///<summary>
    /// The current user can't participate in the giveaway, because they were already a member of the channel when the giveaway started, and the <code>only_new_subscribers</code> was set when starting the giveaway.
    ///</summary>
    public int? JoinedTooEarlyDate { get; set; }

    ///<summary>
    /// If set, the current user can't participate in the giveaway, because they are an administrator in one of the channels (ID specified in this flag) that created the giveaway.
    ///</summary>
    public long? AdminDisallowedChatId { get; set; }

    ///<summary>
    /// If set, the current user can't participate in this giveaway, because their phone number is from the specified disallowed country (specified as a two-letter ISO 3166-1 alpha-2 country code).
    ///</summary>
    public string? DisallowedCountry { get; set; }

    public void ComputeFlag()
    {
        if (Participating) { Flags = Flags.SetBit(0); }
        if (PreparingResults) { Flags = Flags.SetBit(3); }
        if (/*JoinedTooEarlyDate != 0 && */JoinedTooEarlyDate.HasValue) { Flags = Flags.SetBit(1); }
        if (/*AdminDisallowedChatId != 0 &&*/ AdminDisallowedChatId.HasValue) { Flags = Flags.SetBit(2); }
        if (DisallowedCountry != null) { Flags = Flags.SetBit(4); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(StartDate);
        if (Flags.IsBitSet(1)) { writer.Write(JoinedTooEarlyDate.Value); }
        if (Flags.IsBitSet(2)) { writer.Write(AdminDisallowedChatId.Value); }
        if (Flags.IsBitSet(4)) { writer.Write(DisallowedCountry); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Participating = true; }
        if (Flags.IsBitSet(3)) { PreparingResults = true; }
        StartDate = buffer.ReadInt32();
        if (Flags.IsBitSet(1)) { JoinedTooEarlyDate = buffer.ReadInt32(); }
        if (Flags.IsBitSet(2)) { AdminDisallowedChatId = buffer.ReadInt64(); }
        if (Flags.IsBitSet(4)) { DisallowedCountry = buffer.ReadString(); }
    }
}