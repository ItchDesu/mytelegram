// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Updates;

///<summary>
/// Get new <a href="https://corefork.telegram.org/api/updates">updates</a>.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CDN_METHOD_INVALID You can't call this method in a CDN DC.
/// 400 CHANNEL_INVALID The provided channel is invalid.
/// 400 CHANNEL_PRIVATE You haven't joined this channel/supergroup.
/// 403 CHAT_WRITE_FORBIDDEN You can't write in this chat.
/// 400 DATE_EMPTY Date empty.
/// 400 MSG_ID_INVALID Invalid message ID provided.
/// 400 PERSISTENT_TIMESTAMP_EMPTY Persistent timestamp empty.
/// 400 PERSISTENT_TIMESTAMP_INVALID Persistent timestamp invalid.
/// 500 RANDOM_ID_DUPLICATE You provided a random ID that was already used.
/// 400 USERNAME_INVALID The provided username is not valid.
/// 400 USER_NOT_PARTICIPANT You're not a member of this supergroup/channel.
/// See <a href="https://corefork.telegram.org/method/updates.getDifference" />
///</summary>
[TlObject(0x19c2f763)]
public sealed class RequestGetDifference : IRequest<MyTelegram.Schema.Updates.IDifference>
{
    public uint ConstructorId => 0x19c2f763;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// PTS, see <a href="https://corefork.telegram.org/api/updates">updates</a>.
    ///</summary>
    public int Pts { get; set; }

    ///<summary>
    /// PTS limit
    ///</summary>
    public int? PtsLimit { get; set; }

    ///<summary>
    /// For fast updating: if provided and <code>pts + pts_total_limit &lt; remote pts</code>, <a href="https://corefork.telegram.org/constructor/updates.differenceTooLong">updates.differenceTooLong</a> will be returned.<br>Simply tells the server to not return the difference if it is bigger than <code>pts_total_limit</code><br>If the remote pts is too big (&gt; ~4000000), this field will default to 1000000
    ///</summary>
    public int? PtsTotalLimit { get; set; }

    ///<summary>
    /// date, see <a href="https://corefork.telegram.org/api/updates">updates</a>.
    ///</summary>
    public int Date { get; set; }

    ///<summary>
    /// QTS, see <a href="https://corefork.telegram.org/api/updates">updates</a>.
    ///</summary>
    public int Qts { get; set; }

    ///<summary>
    /// QTS limit
    ///</summary>
    public int? QtsLimit { get; set; }

    public void ComputeFlag()
    {
        if (/*PtsLimit != 0 && */PtsLimit.HasValue) { Flags = Flags.SetBit(1); }
        if (/*PtsTotalLimit != 0 && */PtsTotalLimit.HasValue) { Flags = Flags.SetBit(0); }
        if (/*QtsLimit != 0 && */QtsLimit.HasValue) { Flags = Flags.SetBit(2); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Pts);
        if (Flags.IsBitSet(1)) { writer.Write(PtsLimit.Value); }
        if (Flags.IsBitSet(0)) { writer.Write(PtsTotalLimit.Value); }
        writer.Write(Date);
        writer.Write(Qts);
        if (Flags.IsBitSet(2)) { writer.Write(QtsLimit.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Pts = buffer.ReadInt32();
        if (Flags.IsBitSet(1)) { PtsLimit = buffer.ReadInt32(); }
        if (Flags.IsBitSet(0)) { PtsTotalLimit = buffer.ReadInt32(); }
        Date = buffer.ReadInt32();
        Qts = buffer.ReadInt32();
        if (Flags.IsBitSet(2)) { QtsLimit = buffer.ReadInt32(); }
    }
}
