// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Auth;

///<summary>
/// Request an SMS code via Firebase.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 PHONE_CODE_EMPTY phone_code is missing.
/// 400 PHONE_NUMBER_INVALID The phone number is invalid.
/// See <a href="https://corefork.telegram.org/method/auth.requestFirebaseSms" />
///</summary>
[TlObject(0x8e39261e)]
public sealed class RequestRequestFirebaseSms : IRequest<IBool>
{
    public uint ConstructorId => 0x8e39261e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Phone number
    ///</summary>
    public string PhoneNumber { get; set; }

    ///<summary>
    /// Phone code hash returned by <a href="https://corefork.telegram.org/method/auth.sendCode">auth.sendCode</a>
    ///</summary>
    public string PhoneCodeHash { get; set; }

    ///<summary>
    /// On Android, a JWS object obtained as described in the <a href="https://corefork.telegram.org/api/auth">auth documentation </a>
    ///</summary>
    public string? SafetyNetToken { get; set; }

    ///<summary>
    /// On Android, an object obtained as described in the <a href="https://corefork.telegram.org/api/auth">auth documentation </a>
    ///</summary>
    public string? PlayIntegrityToken { get; set; }

    ///<summary>
    /// Secret token received via an apple push notification
    ///</summary>
    public string? IosPushSecret { get; set; }

    public void ComputeFlag()
    {
        if (SafetyNetToken != null) { Flags = Flags.SetBit(0); }
        if (PlayIntegrityToken != null) { Flags = Flags.SetBit(2); }
        if (IosPushSecret != null) { Flags = Flags.SetBit(1); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(PhoneNumber);
        writer.Write(PhoneCodeHash);
        if (Flags.IsBitSet(0)) { writer.Write(SafetyNetToken); }
        if (Flags.IsBitSet(2)) { writer.Write(PlayIntegrityToken); }
        if (Flags.IsBitSet(1)) { writer.Write(IosPushSecret); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        PhoneNumber = buffer.ReadString();
        PhoneCodeHash = buffer.ReadString();
        if (Flags.IsBitSet(0)) { SafetyNetToken = buffer.ReadString(); }
        if (Flags.IsBitSet(2)) { PlayIntegrityToken = buffer.ReadString(); }
        if (Flags.IsBitSet(1)) { IosPushSecret = buffer.ReadString(); }
    }
}
