// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Auth;

///<summary>
/// An authentication code should be delivered via SMS after Firebase attestation, as described in the <a href="https://corefork.telegram.org/api/auth">auth documentation </a>.
/// See <a href="https://corefork.telegram.org/constructor/auth.sentCodeTypeFirebaseSms" />
///</summary>
[TlObject(0x9fd736)]
public sealed class TSentCodeTypeFirebaseSms : ISentCodeType
{
    public uint ConstructorId => 0x9fd736;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// On Android, the nonce to be used as described in the <a href="https://corefork.telegram.org/api/auth">auth documentation </a>
    ///</summary>
    public ReadOnlyMemory<byte>? Nonce { get; set; }

    ///<summary>
    /// Google Play Integrity project ID
    ///</summary>
    public long? PlayIntegrityProjectId { get; set; }

    ///<summary>
    /// Play Integrity API nonce
    ///</summary>
    public ReadOnlyMemory<byte>? PlayIntegrityNonce { get; set; }

    ///<summary>
    /// On iOS, must be compared with the <code>receipt</code> extracted from the received push notification.
    ///</summary>
    public string? Receipt { get; set; }

    ///<summary>
    /// On iOS: if a push notification with the <code>ios_push_secret</code> isn't received within <code>push_timeout</code> seconds, the <code>next_type</code> authentication method must be used, with <a href="https://corefork.telegram.org/method/auth.resendCode">auth.resendCode</a>.
    ///</summary>
    public int? PushTimeout { get; set; }

    ///<summary>
    /// Length of the code that will be delivered.
    ///</summary>
    public int Length { get; set; }

    public void ComputeFlag()
    {
        if (Nonce != null) { Flags = Flags.SetBit(0); }
        if (/*PlayIntegrityProjectId != 0 &&*/ PlayIntegrityProjectId.HasValue) { Flags = Flags.SetBit(2); }
        if (PlayIntegrityNonce != null) { Flags = Flags.SetBit(2); }
        if (Receipt != null) { Flags = Flags.SetBit(1); }
        if (/*PushTimeout != 0 && */PushTimeout.HasValue) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(0)) { writer.Write(Nonce); }
        if (Flags.IsBitSet(2)) { writer.Write(PlayIntegrityProjectId.Value); }
        if (Flags.IsBitSet(2)) { writer.Write(PlayIntegrityNonce); }
        if (Flags.IsBitSet(1)) { writer.Write(Receipt); }
        if (Flags.IsBitSet(1)) { writer.Write(PushTimeout.Value); }
        writer.Write(Length);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Nonce = buffer.ReadBytes(); }
        if (Flags.IsBitSet(2)) { PlayIntegrityProjectId = buffer.ReadInt64(); }
        if (Flags.IsBitSet(2)) { PlayIntegrityNonce = buffer.ReadBytes(); }
        if (Flags.IsBitSet(1)) { Receipt = buffer.ReadString(); }
        if (Flags.IsBitSet(1)) { PushTimeout = buffer.ReadInt32(); }
        Length = buffer.ReadInt32();
    }
}