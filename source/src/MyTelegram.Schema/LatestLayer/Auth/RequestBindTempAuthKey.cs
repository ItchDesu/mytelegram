// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Auth;

///<summary>
/// Binds a temporary authorization key <code>temp_auth_key_id</code> to the permanent authorization key <code>perm_auth_key_id</code>. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.For more information, see <a href="https://corefork.telegram.org/api/pfs">Perfect Forward Secrecy</a>.
/// <para>Possible errors</para>
/// Code Type Description
/// 400 ENCRYPTED_MESSAGE_INVALID Encrypted message invalid.
/// 400 TEMP_AUTH_KEY_ALREADY_BOUND The passed temporary key is already bound to another <strong>perm_auth_key_id</strong>.
/// 400 TEMP_AUTH_KEY_EMPTY No temporary auth key provided.
/// See <a href="https://corefork.telegram.org/method/auth.bindTempAuthKey" />
///</summary>
[TlObject(0xcdd42a05)]
public sealed class RequestBindTempAuthKey : IRequest<IBool>
{
    public uint ConstructorId => 0xcdd42a05;
    ///<summary>
    /// Permanent auth_key_id to bind to
    ///</summary>
    public long PermAuthKeyId { get; set; }

    ///<summary>
    /// Random long from <a href="https://corefork.telegram.org/htmls/method/auth.bindTempAuthKey.html#binding-message-contents">Binding message contents</a>
    ///</summary>
    public long Nonce { get; set; }

    ///<summary>
    /// Unix timestamp to invalidate temporary key, see <a href="https://corefork.telegram.org/htmls/method/auth.bindTempAuthKey.html#binding-message-contents">Binding message contents</a>
    ///</summary>
    public int ExpiresAt { get; set; }

    ///<summary>
    /// See <a href="https://corefork.telegram.org/htmls/method/auth.bindTempAuthKey.html#generating-encrypted-message">Generating encrypted_message</a>
    ///</summary>
    public ReadOnlyMemory<byte> EncryptedMessage { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(PermAuthKeyId);
        writer.Write(Nonce);
        writer.Write(ExpiresAt);
        writer.Write(EncryptedMessage);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        PermAuthKeyId = buffer.ReadInt64();
        Nonce = buffer.ReadInt64();
        ExpiresAt = buffer.ReadInt32();
        EncryptedMessage = buffer.ReadBytes();
    }
}
