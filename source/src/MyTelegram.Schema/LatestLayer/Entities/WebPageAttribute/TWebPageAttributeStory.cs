// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Webpage preview of a Telegram story
/// See <a href="https://corefork.telegram.org/constructor/webPageAttributeStory" />
///</summary>
[TlObject(0x2e94c3e7)]
public sealed class TWebPageAttributeStory : IWebPageAttribute
{
    public uint ConstructorId => 0x2e94c3e7;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Peer that posted the story
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer Peer { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/stories#watching-stories">Story ID</a>
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// May contain the story, if not the story should be fetched when and if needed using <a href="https://corefork.telegram.org/method/stories.getStoriesByID">stories.getStoriesByID</a> with the above <code>id</code> and <code>peer</code>.
    /// See <a href="https://corefork.telegram.org/type/StoryItem" />
    ///</summary>
    public MyTelegram.Schema.IStoryItem? Story { get; set; }

    public void ComputeFlag()
    {
        if (Story != null) { Flags = Flags.SetBit(0); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        writer.Write(Id);
        if (Flags.IsBitSet(0)) { writer.Write(Story); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Peer = buffer.Read<MyTelegram.Schema.IPeer>();
        Id = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Story = buffer.Read<MyTelegram.Schema.IStoryItem>(); }
    }
}