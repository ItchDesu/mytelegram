// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Stickerset preview with all stickers of the stickerset included.<br>
/// Currently used only for <a href="https://corefork.telegram.org/api/custom-emoji">custom emoji stickersets</a>, to avoid a further call to <a href="https://corefork.telegram.org/method/messages.getStickerSet">messages.getStickerSet</a>.
/// See <a href="https://corefork.telegram.org/constructor/stickerSetFullCovered" />
///</summary>
[TlObject(0x40d13c0e)]
public sealed class TStickerSetFullCovered : IStickerSetCovered
{
    public uint ConstructorId => 0x40d13c0e;
    ///<summary>
    /// Stickerset
    /// See <a href="https://corefork.telegram.org/type/StickerSet" />
    ///</summary>
    public MyTelegram.Schema.IStickerSet Set { get; set; }

    ///<summary>
    /// Emoji information about every sticker in the stickerset
    ///</summary>
    public TVector<MyTelegram.Schema.IStickerPack> Packs { get; set; }

    ///<summary>
    /// Keywords for some or every sticker in the stickerset.
    ///</summary>
    public TVector<MyTelegram.Schema.IStickerKeyword> Keywords { get; set; }

    ///<summary>
    /// Stickers
    ///</summary>
    public TVector<MyTelegram.Schema.IDocument> Documents { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Set);
        writer.Write(Packs);
        writer.Write(Keywords);
        writer.Write(Documents);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Set = buffer.Read<MyTelegram.Schema.IStickerSet>();
        Packs = buffer.Read<TVector<MyTelegram.Schema.IStickerPack>>();
        Keywords = buffer.Read<TVector<MyTelegram.Schema.IStickerKeyword>>();
        Documents = buffer.Read<TVector<MyTelegram.Schema.IDocument>>();
    }
}