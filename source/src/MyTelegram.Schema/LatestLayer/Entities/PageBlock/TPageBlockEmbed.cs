// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// An embedded webpage
/// See <a href="https://corefork.telegram.org/constructor/pageBlockEmbed" />
///</summary>
[TlObject(0xa8718dc5)]
public sealed class TPageBlockEmbed : IPageBlock
{
    public uint ConstructorId => 0xa8718dc5;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether the block should be full width
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool FullWidth { get; set; }

    ///<summary>
    /// Whether scrolling should be allowed
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AllowScrolling { get; set; }

    ///<summary>
    /// Web page URL, if available
    ///</summary>
    public string? Url { get; set; }

    ///<summary>
    /// HTML-markup of the embedded page
    ///</summary>
    public string? Html { get; set; }

    ///<summary>
    /// Poster photo, if available
    ///</summary>
    public long? PosterPhotoId { get; set; }

    ///<summary>
    /// Block width, if known
    ///</summary>
    public int? W { get; set; }

    ///<summary>
    /// Block height, if known
    ///</summary>
    public int? H { get; set; }

    ///<summary>
    /// Caption
    /// See <a href="https://corefork.telegram.org/type/PageCaption" />
    ///</summary>
    public MyTelegram.Schema.IPageCaption Caption { get; set; }

    public void ComputeFlag()
    {
        if (FullWidth) { Flags = Flags.SetBit(0); }
        if (AllowScrolling) { Flags = Flags.SetBit(3); }
        if (Url != null) { Flags = Flags.SetBit(1); }
        if (Html != null) { Flags = Flags.SetBit(2); }
        if (/*PosterPhotoId != 0 &&*/ PosterPhotoId.HasValue) { Flags = Flags.SetBit(4); }
        if (/*W != 0 && */W.HasValue) { Flags = Flags.SetBit(5); }
        if (/*H != 0 && */H.HasValue) { Flags = Flags.SetBit(5); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(1)) { writer.Write(Url); }
        if (Flags.IsBitSet(2)) { writer.Write(Html); }
        if (Flags.IsBitSet(4)) { writer.Write(PosterPhotoId.Value); }
        if (Flags.IsBitSet(5)) { writer.Write(W.Value); }
        if (Flags.IsBitSet(5)) { writer.Write(H.Value); }
        writer.Write(Caption);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { FullWidth = true; }
        if (Flags.IsBitSet(3)) { AllowScrolling = true; }
        if (Flags.IsBitSet(1)) { Url = buffer.ReadString(); }
        if (Flags.IsBitSet(2)) { Html = buffer.ReadString(); }
        if (Flags.IsBitSet(4)) { PosterPhotoId = buffer.ReadInt64(); }
        if (Flags.IsBitSet(5)) { W = buffer.ReadInt32(); }
        if (Flags.IsBitSet(5)) { H = buffer.ReadInt32(); }
        Caption = buffer.Read<MyTelegram.Schema.IPageCaption>();
    }
}