// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/factcheck">fact-check </a> created by an independent fact-checker.
/// See <a href="https://corefork.telegram.org/constructor/factCheck" />
///</summary>
[TlObject(0xb89bfccf)]
public sealed class TFactCheck : IFactCheck
{
    public uint ConstructorId => 0xb89bfccf;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// If set, the <code>country</code>/<code>text</code> fields will <strong>not</strong> be set, and the fact check must be fetched manually by the client (if it isn't already cached with the key specified in <code>hash</code>) using bundled <a href="https://corefork.telegram.org/method/messages.getFactCheck">messages.getFactCheck</a> requests, when the message with the factcheck scrolls into view.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NeedCheck { get; set; }

    ///<summary>
    /// A two-letter ISO 3166-1 alpha-2 country code of the country for which the fact-check should be shown.
    ///</summary>
    public string? Country { get; set; }

    ///<summary>
    /// The fact-check.
    /// See <a href="https://corefork.telegram.org/type/TextWithEntities" />
    ///</summary>
    public MyTelegram.Schema.ITextWithEntities? Text { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/offsets#hash-generation">Hash used for caching, for more info click here</a>
    ///</summary>
    public long Hash { get; set; }

    public void ComputeFlag()
    {
        if (NeedCheck) { Flags = Flags.SetBit(0); }
        if (Country != null) { Flags = Flags.SetBit(1); }
        if (Text != null) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(1)) { writer.Write(Country); }
        if (Flags.IsBitSet(1)) { writer.Write(Text); }
        writer.Write(Hash);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { NeedCheck = true; }
        if (Flags.IsBitSet(1)) { Country = buffer.ReadString(); }
        if (Flags.IsBitSet(1)) { Text = buffer.Read<MyTelegram.Schema.ITextWithEntities>(); }
        Hash = buffer.ReadInt64();
    }
}