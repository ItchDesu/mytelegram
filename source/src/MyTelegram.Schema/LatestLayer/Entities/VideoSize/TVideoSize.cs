// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// An <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">animated profile picture</a> in MPEG4 format
/// See <a href="https://corefork.telegram.org/constructor/videoSize" />
///</summary>
[TlObject(0xde33b094)]
public sealed class TVideoSize : IVideoSize
{
    public uint ConstructorId => 0xde33b094;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// <code>u</code> for animated profile pictures, and <code>v</code> for trimmed and downscaled video previews
    ///</summary>
    public string Type { get; set; }

    ///<summary>
    /// Video width
    ///</summary>
    public int W { get; set; }

    ///<summary>
    /// Video height
    ///</summary>
    public int H { get; set; }

    ///<summary>
    /// File size
    ///</summary>
    public int Size { get; set; }

    ///<summary>
    /// Timestamp that should be shown as static preview to the user (seconds)
    ///</summary>
    public double? VideoStartTs { get; set; }

    public void ComputeFlag()
    {
        if (VideoStartTs>0) { Flags = Flags.SetBit(0); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Type);
        writer.Write(W);
        writer.Write(H);
        writer.Write(Size);
        if (Flags.IsBitSet(0)) { writer.Write(VideoStartTs.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Type = buffer.ReadString();
        W = buffer.ReadInt32();
        H = buffer.ReadInt32();
        Size = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { VideoStartTs = buffer.ReadDouble(); }
    }
}