// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// An <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">animated profile picture</a> based on a <a href="https://corefork.telegram.org/api/stickers">sticker</a>.
/// See <a href="https://corefork.telegram.org/constructor/videoSizeStickerMarkup" />
///</summary>
[TlObject(0xda082fe)]
public sealed class TVideoSizeStickerMarkup : IVideoSize
{
    public uint ConstructorId => 0xda082fe;
    ///<summary>
    /// Stickerset
    /// See <a href="https://corefork.telegram.org/type/InputStickerSet" />
    ///</summary>
    public MyTelegram.Schema.IInputStickerSet Stickerset { get; set; }

    ///<summary>
    /// Sticker ID
    ///</summary>
    public long StickerId { get; set; }

    ///<summary>
    /// 1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how <a href="https://corefork.telegram.org/api/wallpapers#fill-types">fill wallpapers</a> are generated. The rotation angle for gradient backgrounds is 0.
    ///</summary>
    public TVector<int> BackgroundColors { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Stickerset);
        writer.Write(StickerId);
        writer.Write(BackgroundColors);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Stickerset = buffer.Read<MyTelegram.Schema.IInputStickerSet>();
        StickerId = buffer.ReadInt64();
        BackgroundColors = buffer.Read<TVector<int>>();
    }
}