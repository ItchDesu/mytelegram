// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/effects">message effect </a>.All <code>long</code> IDs except for <code>id</code> are <a href="https://corefork.telegram.org/constructor/document">document</a>.<code>id</code>s from the containing <a href="https://corefork.telegram.org/constructor/messages.availableEffects">messages.availableEffects</a> constructor.See <a href="https://corefork.telegram.org/api/effects">here </a> for more info on how to use following fields.
/// See <a href="https://corefork.telegram.org/constructor/availableEffect" />
///</summary>
[TlObject(0x93c3e27e)]
public sealed class TAvailableEffect : IAvailableEffect
{
    public uint ConstructorId => 0x93c3e27e;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether a <a href="https://corefork.telegram.org/api/premium">Premium</a> subscription is required to use this effect.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PremiumRequired { get; set; }

    ///<summary>
    /// Unique effect ID.
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Emoji corresponding to the effect, to be used as icon for the effect if <code>static_icon_id</code> is not set.
    ///</summary>
    public string Emoticon { get; set; }

    ///<summary>
    /// ID of the document containing the static icon (WEBP) of the effect.
    ///</summary>
    public long? StaticIconId { get; set; }

    ///<summary>
    /// Contains the preview <a href="https://corefork.telegram.org/api/stickers#animated-stickers">animation (TGS format )</a>, used for the effect selection menu.
    ///</summary>
    public long EffectStickerId { get; set; }

    ///<summary>
    /// If set, contains the actual animated effect <a href="https://corefork.telegram.org/api/stickers#animated-stickers">(TGS format )</a>. If not set, the animated effect must be set equal to the <a href="https://corefork.telegram.org/api/stickers#premium-animated-sticker-effects">premium animated sticker effect</a> associated to the animated sticker specified in <code>effect_sticker_id</code> (always different from the preview animation, fetched thanks to the <a href="https://corefork.telegram.org/constructor/videoSize">videoSize</a> of type <code>f</code> as specified <a href="https://corefork.telegram.org/api/stickers#premium-animated-sticker-effects">here </a>).
    ///</summary>
    public long? EffectAnimationId { get; set; }

    public void ComputeFlag()
    {
        if (PremiumRequired) { Flags = Flags.SetBit(2); }
        if (/*StaticIconId != 0 &&*/ StaticIconId.HasValue) { Flags = Flags.SetBit(0); }
        if (/*EffectAnimationId != 0 &&*/ EffectAnimationId.HasValue) { Flags = Flags.SetBit(1); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Emoticon);
        if (Flags.IsBitSet(0)) { writer.Write(StaticIconId.Value); }
        writer.Write(EffectStickerId);
        if (Flags.IsBitSet(1)) { writer.Write(EffectAnimationId.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(2)) { PremiumRequired = true; }
        Id = buffer.ReadInt64();
        Emoticon = buffer.ReadString();
        if (Flags.IsBitSet(0)) { StaticIconId = buffer.ReadInt64(); }
        EffectStickerId = buffer.ReadInt64();
        if (Flags.IsBitSet(1)) { EffectAnimationId = buffer.ReadInt64(); }
    }
}