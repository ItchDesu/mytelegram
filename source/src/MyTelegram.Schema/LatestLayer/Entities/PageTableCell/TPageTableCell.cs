// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Table cell
/// See <a href="https://corefork.telegram.org/constructor/pageTableCell" />
///</summary>
[TlObject(0x34566b6a)]
public sealed class TPageTableCell : IPageTableCell
{
    public uint ConstructorId => 0x34566b6a;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Is this element part of the column header
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Header { get; set; }

    ///<summary>
    /// Horizontally centered block
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AlignCenter { get; set; }

    ///<summary>
    /// Right-aligned block
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AlignRight { get; set; }

    ///<summary>
    /// Vertically centered block
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ValignMiddle { get; set; }

    ///<summary>
    /// Block vertically-aligned to the bottom
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ValignBottom { get; set; }

    ///<summary>
    /// Content
    /// See <a href="https://corefork.telegram.org/type/RichText" />
    ///</summary>
    public MyTelegram.Schema.IRichText? Text { get; set; }

    ///<summary>
    /// For how many columns should this cell extend
    ///</summary>
    public int? Colspan { get; set; }

    ///<summary>
    /// For how many rows should this cell extend
    ///</summary>
    public int? Rowspan { get; set; }

    public void ComputeFlag()
    {
        if (Header) { Flags = Flags.SetBit(0); }
        if (AlignCenter) { Flags = Flags.SetBit(3); }
        if (AlignRight) { Flags = Flags.SetBit(4); }
        if (ValignMiddle) { Flags = Flags.SetBit(5); }
        if (ValignBottom) { Flags = Flags.SetBit(6); }
        if (Text != null) { Flags = Flags.SetBit(7); }
        if (/*Colspan != 0 && */Colspan.HasValue) { Flags = Flags.SetBit(1); }
        if (/*Rowspan != 0 && */Rowspan.HasValue) { Flags = Flags.SetBit(2); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(7)) { writer.Write(Text); }
        if (Flags.IsBitSet(1)) { writer.Write(Colspan.Value); }
        if (Flags.IsBitSet(2)) { writer.Write(Rowspan.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Header = true; }
        if (Flags.IsBitSet(3)) { AlignCenter = true; }
        if (Flags.IsBitSet(4)) { AlignRight = true; }
        if (Flags.IsBitSet(5)) { ValignMiddle = true; }
        if (Flags.IsBitSet(6)) { ValignBottom = true; }
        if (Flags.IsBitSet(7)) { Text = buffer.Read<MyTelegram.Schema.IRichText>(); }
        if (Flags.IsBitSet(1)) { Colspan = buffer.ReadInt32(); }
        if (Flags.IsBitSet(2)) { Rowspan = buffer.ReadInt32(); }
    }
}