// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// <a href="https://corefork.telegram.org/api/stars#buying-or-gifting-stars">Telegram Stars gift option</a>.
/// See <a href="https://corefork.telegram.org/constructor/starsGiftOption" />
///</summary>
[TlObject(0x5e0589f1)]
public sealed class TStarsGiftOption : IStarsGiftOption
{
    public uint ConstructorId => 0x5e0589f1;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// If set, the option must only be shown in the full list of topup options.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Extended { get; set; }

    ///<summary>
    /// Amount of Telegram stars.
    ///</summary>
    public long Stars { get; set; }

    ///<summary>
    /// Identifier of the store product associated with the option, official apps only.
    ///</summary>
    public string? StoreProduct { get; set; }

    ///<summary>
    /// Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code
    ///</summary>
    public string Currency { get; set; }

    ///<summary>
    /// Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    ///</summary>
    public long Amount { get; set; }

    public void ComputeFlag()
    {
        if (Extended) { Flags = Flags.SetBit(1); }
        if (StoreProduct != null) { Flags = Flags.SetBit(0); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Stars);
        if (Flags.IsBitSet(0)) { writer.Write(StoreProduct); }
        writer.Write(Currency);
        writer.Write(Amount);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(1)) { Extended = true; }
        Stars = buffer.ReadInt64();
        if (Flags.IsBitSet(0)) { StoreProduct = buffer.ReadString(); }
        Currency = buffer.ReadString();
        Amount = buffer.ReadInt64();
    }
}