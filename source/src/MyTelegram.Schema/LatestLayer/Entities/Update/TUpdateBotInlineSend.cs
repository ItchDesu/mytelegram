// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the <a href="https://core.telegram.org/bots/inline#collecting-feedback">feedback collecting</a> for details on how to enable these updates for your bot.
/// See <a href="https://corefork.telegram.org/constructor/updateBotInlineSend" />
///</summary>
[TlObject(0x12f12a07)]
public sealed class TUpdateBotInlineSend : IUpdate
{
    public uint ConstructorId => 0x12f12a07;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// The user that chose the result
    ///</summary>
    public long UserId { get; set; }

    ///<summary>
    /// The query that was used to obtain the result
    ///</summary>
    public string Query { get; set; }

    ///<summary>
    /// Optional. Sender location, only for bots that require user location
    /// See <a href="https://corefork.telegram.org/type/GeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IGeoPoint? Geo { get; set; }

    ///<summary>
    /// The unique identifier for the result that was chosen
    ///</summary>
    public string Id { get; set; }

    ///<summary>
    /// Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.
    /// See <a href="https://corefork.telegram.org/type/InputBotInlineMessageID" />
    ///</summary>
    public MyTelegram.Schema.IInputBotInlineMessageID? MsgId { get; set; }

    public void ComputeFlag()
    {
        if (Geo != null) { Flags = Flags.SetBit(0); }
        if (MsgId != null) { Flags = Flags.SetBit(1); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(UserId);
        writer.Write(Query);
        if (Flags.IsBitSet(0)) { writer.Write(Geo); }
        writer.Write(Id);
        if (Flags.IsBitSet(1)) { writer.Write(MsgId); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        UserId = buffer.ReadInt64();
        Query = buffer.ReadString();
        if (Flags.IsBitSet(0)) { Geo = buffer.Read<MyTelegram.Schema.IGeoPoint>(); }
        Id = buffer.ReadString();
        if (Flags.IsBitSet(1)) { MsgId = buffer.Read<MyTelegram.Schema.IInputBotInlineMessageID>(); }
    }
}