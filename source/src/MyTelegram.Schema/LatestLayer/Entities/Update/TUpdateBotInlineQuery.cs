// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// An incoming inline query
/// See <a href="https://corefork.telegram.org/constructor/updateBotInlineQuery" />
///</summary>
[TlObject(0x496f379c)]
public sealed class TUpdateBotInlineQuery : IUpdate
{
    public uint ConstructorId => 0x496f379c;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Query ID
    ///</summary>
    public long QueryId { get; set; }

    ///<summary>
    /// User that sent the query
    ///</summary>
    public long UserId { get; set; }

    ///<summary>
    /// Text of query
    ///</summary>
    public string Query { get; set; }

    ///<summary>
    /// Attached geolocation
    /// See <a href="https://corefork.telegram.org/type/GeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IGeoPoint? Geo { get; set; }

    ///<summary>
    /// Type of the chat from which the inline query was sent.
    /// See <a href="https://corefork.telegram.org/type/InlineQueryPeerType" />
    ///</summary>
    public MyTelegram.Schema.IInlineQueryPeerType? PeerType { get; set; }

    ///<summary>
    /// Offset to navigate through results
    ///</summary>
    public string Offset { get; set; }

    public void ComputeFlag()
    {
        if (Geo != null) { Flags = Flags.SetBit(0); }
        if (PeerType != null) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(QueryId);
        writer.Write(UserId);
        writer.Write(Query);
        if (Flags.IsBitSet(0)) { writer.Write(Geo); }
        if (Flags.IsBitSet(1)) { writer.Write(PeerType); }
        writer.Write(Offset);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        QueryId = buffer.ReadInt64();
        UserId = buffer.ReadInt64();
        Query = buffer.ReadString();
        if (Flags.IsBitSet(0)) { Geo = buffer.Read<MyTelegram.Schema.IGeoPoint>(); }
        if (Flags.IsBitSet(1)) { PeerType = buffer.Read<MyTelegram.Schema.IInlineQueryPeerType>(); }
        Offset = buffer.ReadString();
    }
}