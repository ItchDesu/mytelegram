// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// List of actions that are possible when interacting with this user, to be shown as suggested actions in the <a href="https://corefork.telegram.org/api/action-bar">chat action bar </a>, see <a href="https://corefork.telegram.org/api/action-bar">here </a> for more info.
/// See <a href="https://corefork.telegram.org/constructor/peerSettings" />
///</summary>
[TlObject(0xf47741f7)]
public sealed class TPeerSettings : IPeerSettings
{
    public uint ConstructorId => 0xf47741f7;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether we can still report the user for spam
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReportSpam { get; set; }

    ///<summary>
    /// Whether we can add the user as contact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AddContact { get; set; }

    ///<summary>
    /// Whether we can block the user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BlockContact { get; set; }

    ///<summary>
    /// Whether we can share the user's contact
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ShareContact { get; set; }

    ///<summary>
    /// Whether a special exception for contacts is needed
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NeedContactsException { get; set; }

    ///<summary>
    /// Whether we can report a geogroup as irrelevant for this location
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReportGeo { get; set; }

    ///<summary>
    /// Whether this peer was automatically archived according to <a href="https://corefork.telegram.org/constructor/globalPrivacySettings">privacy settings</a> and can be unarchived
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Autoarchived { get; set; }

    ///<summary>
    /// If set, this is a recently created group chat to which new members can be invited
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool InviteMembers { get; set; }

    ///<summary>
    /// This flag is set if <code>request_chat_title</code> and <code>request_chat_date</code> fields are set and the <a href="https://corefork.telegram.org/api/invites#join-requests">join request </a> is related to a channel (otherwise if only the request fields are set, the <a href="https://corefork.telegram.org/api/invites#join-requests">join request </a> is related to a chat).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool RequestChatBroadcast { get; set; }

    ///<summary>
    /// This flag is set if both <code>business_bot_id</code> and <code>business_bot_manage_url</code> are set and all <a href="https://corefork.telegram.org/api/business#connected-bots">connected business bots </a> were paused in this chat using <a href="https://corefork.telegram.org/method/account.toggleConnectedBotPaused">account.toggleConnectedBotPaused </a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BusinessBotPaused { get; set; }

    ///<summary>
    /// This flag is set if both <code>business_bot_id</code> and <code>business_bot_manage_url</code> are set and <a href="https://corefork.telegram.org/api/business#connected-bots">connected business bots </a> can reply to messages in this chat, as specified by the settings during <a href="https://corefork.telegram.org/api/business#connected-bots">initial configuration</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BusinessBotCanReply { get; set; }

    ///<summary>
    /// Distance in meters between us and this peer
    ///</summary>
    public int? GeoDistance { get; set; }

    ///<summary>
    /// If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat/channel's title.
    ///</summary>
    public string? RequestChatTitle { get; set; }

    ///<summary>
    /// If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the <a href="https://corefork.telegram.org/api/invites#join-requests">join request </a> was sent.
    ///</summary>
    public int? RequestChatDate { get; set; }

    ///<summary>
    /// Contains the ID of the <a href="https://corefork.telegram.org/api/business#connected-bots">business bot </a> managing this chat, used to display info about the bot in the action bar.
    ///</summary>
    public long? BusinessBotId { get; set; }

    ///<summary>
    /// Contains a <a href="https://corefork.telegram.org/api/links">deep link </a>, used to open a management menu in the business bot. This flag is set if and only if <code>business_bot_id</code> is set.
    ///</summary>
    public string? BusinessBotManageUrl { get; set; }
    public long? ChargePaidMessageStars { get; set; }
    public string? RegistrationMonth { get; set; }
    public string? PhoneCountry { get; set; }
    public int? NameChangeDate { get; set; }
    public int? PhotoChangeDate { get; set; }

    public void ComputeFlag()
    {
        if (ReportSpam) { Flags = Flags.SetBit(0); }
        if (AddContact) { Flags = Flags.SetBit(1); }
        if (BlockContact) { Flags = Flags.SetBit(2); }
        if (ShareContact) { Flags = Flags.SetBit(3); }
        if (NeedContactsException) { Flags = Flags.SetBit(4); }
        if (ReportGeo) { Flags = Flags.SetBit(5); }
        if (Autoarchived) { Flags = Flags.SetBit(7); }
        if (InviteMembers) { Flags = Flags.SetBit(8); }
        if (RequestChatBroadcast) { Flags = Flags.SetBit(10); }
        if (BusinessBotPaused) { Flags = Flags.SetBit(11); }
        if (BusinessBotCanReply) { Flags = Flags.SetBit(12); }
        if (/*GeoDistance != 0 && */GeoDistance.HasValue) { Flags = Flags.SetBit(6); }
        if (RequestChatTitle != null) { Flags = Flags.SetBit(9); }
        if (/*RequestChatDate != 0 && */RequestChatDate.HasValue) { Flags = Flags.SetBit(9); }
        if (/*BusinessBotId != 0 &&*/ BusinessBotId.HasValue) { Flags = Flags.SetBit(13); }
        if (BusinessBotManageUrl != null) { Flags = Flags.SetBit(13); }
        if (/*ChargePaidMessageStars != 0 &&*/ ChargePaidMessageStars.HasValue) { Flags = Flags.SetBit(14); }
        if (RegistrationMonth != null) { Flags = Flags.SetBit(15); }
        if (PhoneCountry != null) { Flags = Flags.SetBit(16); }
        if (/*NameChangeDate != 0 && */NameChangeDate.HasValue) { Flags = Flags.SetBit(17); }
        if (/*PhotoChangeDate != 0 && */PhotoChangeDate.HasValue) { Flags = Flags.SetBit(18); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(6)) { writer.Write(GeoDistance.Value); }
        if (Flags.IsBitSet(9)) { writer.Write(RequestChatTitle); }
        if (Flags.IsBitSet(9)) { writer.Write(RequestChatDate.Value); }
        if (Flags.IsBitSet(13)) { writer.Write(BusinessBotId.Value); }
        if (Flags.IsBitSet(13)) { writer.Write(BusinessBotManageUrl); }
        if (Flags.IsBitSet(14)) { writer.Write(ChargePaidMessageStars.Value); }
        if (Flags.IsBitSet(15)) { writer.Write(RegistrationMonth); }
        if (Flags.IsBitSet(16)) { writer.Write(PhoneCountry); }
        if (Flags.IsBitSet(17)) { writer.Write(NameChangeDate.Value); }
        if (Flags.IsBitSet(18)) { writer.Write(PhotoChangeDate.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { ReportSpam = true; }
        if (Flags.IsBitSet(1)) { AddContact = true; }
        if (Flags.IsBitSet(2)) { BlockContact = true; }
        if (Flags.IsBitSet(3)) { ShareContact = true; }
        if (Flags.IsBitSet(4)) { NeedContactsException = true; }
        if (Flags.IsBitSet(5)) { ReportGeo = true; }
        if (Flags.IsBitSet(7)) { Autoarchived = true; }
        if (Flags.IsBitSet(8)) { InviteMembers = true; }
        if (Flags.IsBitSet(10)) { RequestChatBroadcast = true; }
        if (Flags.IsBitSet(11)) { BusinessBotPaused = true; }
        if (Flags.IsBitSet(12)) { BusinessBotCanReply = true; }
        if (Flags.IsBitSet(6)) { GeoDistance = buffer.ReadInt32(); }
        if (Flags.IsBitSet(9)) { RequestChatTitle = buffer.ReadString(); }
        if (Flags.IsBitSet(9)) { RequestChatDate = buffer.ReadInt32(); }
        if (Flags.IsBitSet(13)) { BusinessBotId = buffer.ReadInt64(); }
        if (Flags.IsBitSet(13)) { BusinessBotManageUrl = buffer.ReadString(); }
        if (Flags.IsBitSet(14)) { ChargePaidMessageStars = buffer.ReadInt64(); }
        if (Flags.IsBitSet(15)) { RegistrationMonth = buffer.ReadString(); }
        if (Flags.IsBitSet(16)) { PhoneCountry = buffer.ReadString(); }
        if (Flags.IsBitSet(17)) { NameChangeDate = buffer.ReadInt32(); }
        if (Flags.IsBitSet(18)) { PhotoChangeDate = buffer.ReadInt32(); }
    }
}