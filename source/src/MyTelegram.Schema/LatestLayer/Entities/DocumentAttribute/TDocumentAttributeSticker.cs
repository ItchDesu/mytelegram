// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Defines a sticker
/// See <a href="https://corefork.telegram.org/constructor/documentAttributeSticker" />
///</summary>
[TlObject(0x6319d612)]
public sealed class TDocumentAttributeSticker : IDocumentAttribute
{
    public uint ConstructorId => 0x6319d612;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether this is a mask sticker
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Mask { get; set; }

    ///<summary>
    /// Alternative emoji representation of sticker
    ///</summary>
    public string Alt { get; set; }

    ///<summary>
    /// Associated stickerset
    /// See <a href="https://corefork.telegram.org/type/InputStickerSet" />
    ///</summary>
    public MyTelegram.Schema.IInputStickerSet Stickerset { get; set; }

    ///<summary>
    /// Mask coordinates (if this is a mask sticker, attached to a photo)
    /// See <a href="https://corefork.telegram.org/type/MaskCoords" />
    ///</summary>
    public MyTelegram.Schema.IMaskCoords? MaskCoords { get; set; }

    public void ComputeFlag()
    {
        if (Mask) { Flags = Flags.SetBit(1); }
        if (MaskCoords != null) { Flags = Flags.SetBit(0); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Alt);
        writer.Write(Stickerset);
        if (Flags.IsBitSet(0)) { writer.Write(MaskCoords); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(1)) { Mask = true; }
        Alt = buffer.ReadString();
        Stickerset = buffer.Read<MyTelegram.Schema.IInputStickerSet>();
        if (Flags.IsBitSet(0)) { MaskCoords = buffer.Read<MyTelegram.Schema.IMaskCoords>(); }
    }
}