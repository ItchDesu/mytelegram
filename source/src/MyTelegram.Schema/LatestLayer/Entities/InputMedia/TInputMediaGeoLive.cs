// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// <a href="https://corefork.telegram.org/api/live-location">Live geolocation</a>
/// See <a href="https://corefork.telegram.org/constructor/inputMediaGeoLive" />
///</summary>
[TlObject(0x971fa843)]
public sealed class TInputMediaGeoLive : IInputMedia
{
    public uint ConstructorId => 0x971fa843;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether sending of the geolocation was stopped
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Stopped { get; set; }

    ///<summary>
    /// Current geolocation
    /// See <a href="https://corefork.telegram.org/type/InputGeoPoint" />
    ///</summary>
    public MyTelegram.Schema.IInputGeoPoint GeoPoint { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a direction in which the location moves, in degrees; 1-360.
    ///</summary>
    public int? Heading { get; set; }

    ///<summary>
    /// Validity period of the current location
    ///</summary>
    public int? Period { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/live-location">live locations</a>, a maximum distance to another chat member for proximity alerts, in meters (0-100000)
    ///</summary>
    public int? ProximityNotificationRadius { get; set; }

    public void ComputeFlag()
    {
        if (Stopped) { Flags = Flags.SetBit(0); }
        if (/*Heading != 0 && */Heading.HasValue) { Flags = Flags.SetBit(2); }
        if (/*Period != 0 && */Period.HasValue) { Flags = Flags.SetBit(1); }
        if (/*ProximityNotificationRadius != 0 && */ProximityNotificationRadius.HasValue) { Flags = Flags.SetBit(3); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(GeoPoint);
        if (Flags.IsBitSet(2)) { writer.Write(Heading.Value); }
        if (Flags.IsBitSet(1)) { writer.Write(Period.Value); }
        if (Flags.IsBitSet(3)) { writer.Write(ProximityNotificationRadius.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Stopped = true; }
        GeoPoint = buffer.Read<MyTelegram.Schema.IInputGeoPoint>();
        if (Flags.IsBitSet(2)) { Heading = buffer.ReadInt32(); }
        if (Flags.IsBitSet(1)) { Period = buffer.ReadInt32(); }
        if (Flags.IsBitSet(3)) { ProximityNotificationRadius = buffer.ReadInt32(); }
    }
}