// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Secure value
/// See <a href="https://corefork.telegram.org/constructor/secureValue" />
///</summary>
[TlObject(0x187fa0ca)]
public sealed class TSecureValue : ISecureValue
{
    public uint ConstructorId => 0x187fa0ca;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Secure <a href="https://corefork.telegram.org/passport">passport</a> value type
    /// See <a href="https://corefork.telegram.org/type/SecureValueType" />
    ///</summary>
    public MyTelegram.Schema.ISecureValueType Type { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">Telegram Passport</a> element data
    /// See <a href="https://corefork.telegram.org/type/SecureData" />
    ///</summary>
    public MyTelegram.Schema.ISecureData? Data { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the front side of the document
    /// See <a href="https://corefork.telegram.org/type/SecureFile" />
    ///</summary>
    public MyTelegram.Schema.ISecureFile? FrontSide { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with the reverse side of the document
    /// See <a href="https://corefork.telegram.org/type/SecureFile" />
    ///</summary>
    public MyTelegram.Schema.ISecureFile? ReverseSide { get; set; }

    ///<summary>
    /// Encrypted <a href="https://corefork.telegram.org/passport">passport</a> file with a selfie of the user holding the document
    /// See <a href="https://corefork.telegram.org/type/SecureFile" />
    ///</summary>
    public MyTelegram.Schema.ISecureFile? Selfie { get; set; }

    ///<summary>
    /// Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with translated versions of the provided documents
    ///</summary>
    public TVector<MyTelegram.Schema.ISecureFile>? Translation { get; set; }

    ///<summary>
    /// Array of encrypted <a href="https://corefork.telegram.org/passport">passport</a> files with photos the of the documents
    ///</summary>
    public TVector<MyTelegram.Schema.ISecureFile>? Files { get; set; }

    ///<summary>
    /// Plaintext verified <a href="https://corefork.telegram.org/passport">passport</a> data
    /// See <a href="https://corefork.telegram.org/type/SecurePlainData" />
    ///</summary>
    public MyTelegram.Schema.ISecurePlainData? PlainData { get; set; }

    ///<summary>
    /// Data hash
    ///</summary>
    public ReadOnlyMemory<byte> Hash { get; set; }

    public void ComputeFlag()
    {
        if (Data != null) { Flags = Flags.SetBit(0); }
        if (FrontSide != null) { Flags = Flags.SetBit(1); }
        if (ReverseSide != null) { Flags = Flags.SetBit(2); }
        if (Selfie != null) { Flags = Flags.SetBit(3); }
        if (Translation?.Count > 0) { Flags = Flags.SetBit(6); }
        if (Files?.Count > 0) { Flags = Flags.SetBit(4); }
        if (PlainData != null) { Flags = Flags.SetBit(5); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Type);
        if (Flags.IsBitSet(0)) { writer.Write(Data); }
        if (Flags.IsBitSet(1)) { writer.Write(FrontSide); }
        if (Flags.IsBitSet(2)) { writer.Write(ReverseSide); }
        if (Flags.IsBitSet(3)) { writer.Write(Selfie); }
        if (Flags.IsBitSet(6)) { writer.Write(Translation); }
        if (Flags.IsBitSet(4)) { writer.Write(Files); }
        if (Flags.IsBitSet(5)) { writer.Write(PlainData); }
        writer.Write(Hash);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Type = buffer.Read<MyTelegram.Schema.ISecureValueType>();
        if (Flags.IsBitSet(0)) { Data = buffer.Read<MyTelegram.Schema.ISecureData>(); }
        if (Flags.IsBitSet(1)) { FrontSide = buffer.Read<MyTelegram.Schema.ISecureFile>(); }
        if (Flags.IsBitSet(2)) { ReverseSide = buffer.Read<MyTelegram.Schema.ISecureFile>(); }
        if (Flags.IsBitSet(3)) { Selfie = buffer.Read<MyTelegram.Schema.ISecureFile>(); }
        if (Flags.IsBitSet(6)) { Translation = buffer.Read<TVector<MyTelegram.Schema.ISecureFile>>(); }
        if (Flags.IsBitSet(4)) { Files = buffer.Read<TVector<MyTelegram.Schema.ISecureFile>>(); }
        if (Flags.IsBitSet(5)) { PlainData = buffer.Read<MyTelegram.Schema.ISecurePlainData>(); }
        Hash = buffer.ReadBytes();
    }
}