// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Full info about a <a href="https://corefork.telegram.org/api/channel#channels">channel</a>, <a href="https://corefork.telegram.org/api/channel#supergroups">supergroup</a> or <a href="https://corefork.telegram.org/api/channel#gigagroups">gigagroup</a>.When updating the <a href="https://corefork.telegram.org/api/peers">local peer database </a>, all fields from the newly received constructor take priority over the old constructor cached locally (including by removing fields that aren't set in the new constructor).
/// See <a href="https://corefork.telegram.org/constructor/channelFull" />
///</summary>
[TlObject(0xe07429de)]
public sealed class TChannelFull : MyTelegram.Schema.IChatFull, ILayeredChannelFull
{
    public uint ConstructorId => 0xe07429de;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Can we view the participant list?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanViewParticipants { get; set; }

    ///<summary>
    /// Can we set the channel's username?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanSetUsername { get; set; }

    ///<summary>
    /// Can we <a href="https://corefork.telegram.org/method/channels.setStickers">associate</a> a stickerpack to the supergroup?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanSetStickers { get; set; }

    ///<summary>
    /// Is the history before we joined hidden to us?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HiddenPrehistory { get; set; }

    ///<summary>
    /// Can we set the geolocation of this group (for geogroups)
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanSetLocation { get; set; }

    ///<summary>
    /// Whether scheduled messages are available
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasScheduled { get; set; }

    ///<summary>
    /// Can the user view <a href="https://corefork.telegram.org/api/stats">channel/supergroup statistics</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanViewStats { get; set; }

    ///<summary>
    /// Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in <a href="https://corefork.telegram.org/api/discussion">discussion replies via @replies</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Blocked { get; set; }

    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags2 { get; set; }

    ///<summary>
    /// Can we delete this channel?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanDeleteChannel { get; set; }

    ///<summary>
    /// Whether <a href="https://corefork.telegram.org/api/antispam">native antispam</a> functionality is enabled in this supergroup.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Antispam { get; set; }

    ///<summary>
    /// Whether the participant list is hidden.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ParticipantsHidden { get; set; }

    ///<summary>
    /// Whether the <a href="https://corefork.telegram.org/api/translation">real-time chat translation popup</a> should be hidden.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool TranslationsDisabled { get; set; }

    ///<summary>
    /// Whether this user has some <a href="https://corefork.telegram.org/api/stories#pinned-or-archived-stories">pinned stories</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesPinnedAvailable { get; set; }

    ///<summary>
    /// Users may also choose to display messages from all topics of a <a href="https://corefork.telegram.org/api/forum">forum</a> as if they were sent to a normal group, using a "View as messages" setting in the local client.  <br>This setting only affects the current account, and is synced to other logged in sessions using the <a href="https://corefork.telegram.org/method/channels.toggleViewForumAsMessages">channels.toggleViewForumAsMessages</a> method; invoking this method will update the value of this flag.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ViewForumAsMessages { get; set; }

    ///<summary>
    /// Whether ads on this channel were <a href="https://corefork.telegram.org/api/boost#disable-ads-on-the-channel">disabled as specified here </a> (this flag is only visible to the owner of the channel).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool RestrictedSponsored { get; set; }

    ///<summary>
    /// If set, this user can view <a href="https://corefork.telegram.org/api/revenue#revenue-statistics">ad revenue statistics </a> for this channel.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanViewRevenue { get; set; }

    ///<summary>
    /// Whether the current user can send or forward <a href="https://corefork.telegram.org/api/paid-media">paid media </a> to this channel.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PaidMediaAllowed { get; set; }

    ///<summary>
    /// If set, this user can view <a href="https://corefork.telegram.org/api/stars#revenue-statistics">Telegram Star revenue statistics </a> for this channel.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool CanViewStarsRevenue { get; set; }

    ///<summary>
    /// If set, users may send <a href="https://corefork.telegram.org/api/reactions#paid-reactions">paid Telegram Star reactions </a> to messages of this channel.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PaidReactionsAvailable { get; set; }
    public bool StargiftsAvailable { get; set; }
    public bool PaidMessagesAvailable { get; set; }

    ///<summary>
    /// ID of the channel
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Info about the channel
    ///</summary>
    public string About { get; set; }

    ///<summary>
    /// Number of participants of the channel
    ///</summary>
    public int? ParticipantsCount { get; set; }

    ///<summary>
    /// Number of channel admins
    ///</summary>
    public int? AdminsCount { get; set; }

    ///<summary>
    /// Number of users <a href="https://corefork.telegram.org/api/rights">kicked</a> from the channel
    ///</summary>
    public int? KickedCount { get; set; }

    ///<summary>
    /// Number of users <a href="https://corefork.telegram.org/api/rights">banned</a> from the channel
    ///</summary>
    public int? BannedCount { get; set; }

    ///<summary>
    /// Number of users currently online
    ///</summary>
    public int? OnlineCount { get; set; }

    ///<summary>
    /// Position up to which all incoming messages are read.
    ///</summary>
    public int ReadInboxMaxId { get; set; }

    ///<summary>
    /// Position up to which all outgoing messages are read.
    ///</summary>
    public int ReadOutboxMaxId { get; set; }

    ///<summary>
    /// Count of unread messages
    ///</summary>
    public int UnreadCount { get; set; }

    ///<summary>
    /// Channel picture
    /// See <a href="https://corefork.telegram.org/type/Photo" />
    ///</summary>
    public MyTelegram.Schema.IPhoto ChatPhoto { get; set; }

    ///<summary>
    /// Notification settings
    /// See <a href="https://corefork.telegram.org/type/PeerNotifySettings" />
    ///</summary>
    public MyTelegram.Schema.IPeerNotifySettings NotifySettings { get; set; }

    ///<summary>
    /// Invite link
    /// See <a href="https://corefork.telegram.org/type/ExportedChatInvite" />
    ///</summary>
    public MyTelegram.Schema.IExportedChatInvite? ExportedInvite { get; set; }

    ///<summary>
    /// Info about bots in the channel/supergroup
    ///</summary>
    public TVector<MyTelegram.Schema.IBotInfo> BotInfo { get; set; }

    ///<summary>
    /// The chat ID from which this group was <a href="https://corefork.telegram.org/api/channel">migrated</a>
    ///</summary>
    public long? MigratedFromChatId { get; set; }

    ///<summary>
    /// The message ID in the original chat at which this group was <a href="https://corefork.telegram.org/api/channel">migrated</a>
    ///</summary>
    public int? MigratedFromMaxId { get; set; }

    ///<summary>
    /// Message ID of the last <a href="https://corefork.telegram.org/api/pin">pinned message</a>
    ///</summary>
    public int? PinnedMsgId { get; set; }

    ///<summary>
    /// Associated stickerset
    /// See <a href="https://corefork.telegram.org/type/StickerSet" />
    ///</summary>
    public MyTelegram.Schema.IStickerSet? Stickerset { get; set; }

    ///<summary>
    /// Identifier of a maximum unavailable message in a channel due to hidden history.
    ///</summary>
    public int? AvailableMinId { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/folders#peer-folders">Peer folder ID, for more info click here</a>
    ///</summary>
    public int? FolderId { get; set; }

    ///<summary>
    /// ID of the linked <a href="https://corefork.telegram.org/api/discussion">discussion chat</a> for channels (and vice versa, the ID of the linked channel for discussion chats).
    ///</summary>
    public long? LinkedChatId { get; set; }

    ///<summary>
    /// Location of the geogroup
    /// See <a href="https://corefork.telegram.org/type/ChannelLocation" />
    ///</summary>
    public MyTelegram.Schema.IChannelLocation? Location { get; set; }

    ///<summary>
    /// If specified, users in supergroups will only be able to send one message every <code>slowmode_seconds</code> seconds
    ///</summary>
    public int? SlowmodeSeconds { get; set; }

    ///<summary>
    /// Indicates when the user will be allowed to send another message in the supergroup (unixtime)
    ///</summary>
    public int? SlowmodeNextSendDate { get; set; }

    ///<summary>
    /// If set, specifies the DC to use for fetching channel statistics
    ///</summary>
    public int? StatsDc { get; set; }

    ///<summary>
    /// Latest <a href="https://corefork.telegram.org/api/updates">PTS</a> for this channel
    ///</summary>
    public int Pts { get; set; }

    ///<summary>
    /// Livestream or group call information
    /// See <a href="https://corefork.telegram.org/type/InputGroupCall" />
    ///</summary>
    public MyTelegram.Schema.IInputGroupCall? Call { get; set; }

    ///<summary>
    /// Time-To-Live of messages in this channel or supergroup
    ///</summary>
    public int? TtlPeriod { get; set; }

    ///<summary>
    /// A list of <a href="https://corefork.telegram.org/api/config#suggestions">suggested actions</a> for the supergroup admin, <a href="https://corefork.telegram.org/api/config#suggestions">see here for more info </a>.
    ///</summary>
    public TVector<string>? PendingSuggestions { get; set; }

    ///<summary>
    /// When using <a href="https://corefork.telegram.org/method/phone.getGroupCallJoinAs">phone.getGroupCallJoinAs</a> to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default.
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? GroupcallDefaultJoinAs { get; set; }

    ///<summary>
    /// Emoji representing a specific chat theme
    ///</summary>
    public string? ThemeEmoticon { get; set; }

    ///<summary>
    /// Pending <a href="https://corefork.telegram.org/api/invites#join-requests">join requests </a>
    ///</summary>
    public int? RequestsPending { get; set; }

    ///<summary>
    /// IDs of users who requested to join recently
    ///</summary>
    public TVector<long>? RecentRequesters { get; set; }

    ///<summary>
    /// Default peer used for sending messages to this channel
    /// See <a href="https://corefork.telegram.org/type/Peer" />
    ///</summary>
    public MyTelegram.Schema.IPeer? DefaultSendAs { get; set; }

    ///<summary>
    /// Allowed <a href="https://corefork.telegram.org/api/reactions">message reactions </a>
    /// See <a href="https://corefork.telegram.org/type/ChatReactions" />
    ///</summary>
    public MyTelegram.Schema.IChatReactions? AvailableReactions { get; set; }

    ///<summary>
    /// This flag may be used to impose a custom limit of unique reactions (i.e. a customizable version of <a href="https://corefork.telegram.org/api/config#reactions-uniq-max">appConfig.reactions_uniq_max</a>).
    ///</summary>
    public int? ReactionsLimit { get; set; }

    ///<summary>
    /// Channel <a href="https://corefork.telegram.org/api/stories">stories</a>
    /// See <a href="https://corefork.telegram.org/type/PeerStories" />
    ///</summary>
    public MyTelegram.Schema.IPeerStories? Stories { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/wallpapers">Wallpaper</a>
    /// See <a href="https://corefork.telegram.org/type/WallPaper" />
    ///</summary>
    public MyTelegram.Schema.IWallPaper? Wallpaper { get; set; }

    ///<summary>
    /// The number of <a href="https://corefork.telegram.org/api/boost">boosts</a> the current user has applied to the current <em>supergroup</em>.
    ///</summary>
    public int? BoostsApplied { get; set; }

    ///<summary>
    /// The number of <a href="https://corefork.telegram.org/api/boost">boosts</a> this <em>supergroup</em> requires to bypass slowmode and other restrictions, see <a href="https://corefork.telegram.org/api/boost#bypass-slowmode-and-chat-restrictions">here </a> for more info.
    ///</summary>
    public int? BoostsUnrestrict { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/custom-emoji">Custom emoji stickerset</a> associated to the current <em>supergroup</em>, set using <a href="https://corefork.telegram.org/method/channels.setEmojiStickers">channels.setEmojiStickers</a> after reaching the appropriate boost level, see <a href="https://corefork.telegram.org/api/boost#setting-a-custom-emoji-stickerset-for-supergroups">here </a> for more info.
    /// See <a href="https://corefork.telegram.org/type/StickerSet" />
    ///</summary>
    public MyTelegram.Schema.IStickerSet? Emojiset { get; set; }
    public MyTelegram.Schema.IBotVerification? BotVerification { get; set; }
    public int? StargiftsCount { get; set; }
    public long? SendPaidMessagesStars { get; set; }

    public void ComputeFlag()
    {
        if (CanViewParticipants) { Flags = Flags.SetBit(3); }
        if (CanSetUsername) { Flags = Flags.SetBit(6); }
        if (CanSetStickers) { Flags = Flags.SetBit(7); }
        if (HiddenPrehistory) { Flags = Flags.SetBit(10); }
        if (CanSetLocation) { Flags = Flags.SetBit(16); }
        if (HasScheduled) { Flags = Flags.SetBit(19); }
        if (CanViewStats) { Flags = Flags.SetBit(20); }
        if (Blocked) { Flags = Flags.SetBit(22); }
        if (CanDeleteChannel) { Flags2 = Flags2.SetBit(0); }
        if (Antispam) { Flags2 = Flags2.SetBit(1); }
        if (ParticipantsHidden) { Flags2 = Flags2.SetBit(2); }
        if (TranslationsDisabled) { Flags2 = Flags2.SetBit(3); }
        if (StoriesPinnedAvailable) { Flags2 = Flags2.SetBit(5); }
        if (ViewForumAsMessages) { Flags2 = Flags2.SetBit(6); }
        if (RestrictedSponsored) { Flags2 = Flags2.SetBit(11); }
        if (CanViewRevenue) { Flags2 = Flags2.SetBit(12); }
        if (PaidMediaAllowed) { Flags2 = Flags2.SetBit(14); }
        if (CanViewStarsRevenue) { Flags2 = Flags2.SetBit(15); }
        if (PaidReactionsAvailable) { Flags2 = Flags2.SetBit(16); }
        if (StargiftsAvailable) { Flags2 = Flags2.SetBit(19); }
        if (PaidMessagesAvailable) { Flags2 = Flags2.SetBit(20); }
        if (/*ParticipantsCount != 0 && */ParticipantsCount.HasValue) { Flags = Flags.SetBit(0); }
        if (/*AdminsCount != 0 && */AdminsCount.HasValue) { Flags = Flags.SetBit(1); }
        if (/*KickedCount != 0 && */KickedCount.HasValue) { Flags = Flags.SetBit(2); }
        if (/*BannedCount != 0 && */BannedCount.HasValue) { Flags = Flags.SetBit(2); }
        if (/*OnlineCount != 0 && */OnlineCount.HasValue) { Flags = Flags.SetBit(13); }
        if (ExportedInvite != null) { Flags = Flags.SetBit(23); }
        if (/*MigratedFromChatId != 0 &&*/ MigratedFromChatId.HasValue) { Flags = Flags.SetBit(4); }
        if (/*MigratedFromMaxId != 0 && */MigratedFromMaxId.HasValue) { Flags = Flags.SetBit(4); }
        if (/*PinnedMsgId != 0 && */PinnedMsgId.HasValue) { Flags = Flags.SetBit(5); }
        if (Stickerset != null) { Flags = Flags.SetBit(8); }
        if (/*AvailableMinId != 0 && */AvailableMinId.HasValue) { Flags = Flags.SetBit(9); }
        if (/*FolderId != 0 && */FolderId.HasValue) { Flags = Flags.SetBit(11); }
        if (/*LinkedChatId != 0 &&*/ LinkedChatId.HasValue) { Flags = Flags.SetBit(14); }
        if (Location != null) { Flags = Flags.SetBit(15); }
        if (/*SlowmodeSeconds != 0 && */SlowmodeSeconds.HasValue) { Flags = Flags.SetBit(17); }
        if (/*SlowmodeNextSendDate != 0 && */SlowmodeNextSendDate.HasValue) { Flags = Flags.SetBit(18); }
        if (/*StatsDc != 0 && */StatsDc.HasValue) { Flags = Flags.SetBit(12); }
        if (Call != null) { Flags = Flags.SetBit(21); }
        if (/*TtlPeriod != 0 && */TtlPeriod.HasValue) { Flags = Flags.SetBit(24); }
        if (PendingSuggestions?.Count > 0) { Flags = Flags.SetBit(25); }
        if (GroupcallDefaultJoinAs != null) { Flags = Flags.SetBit(26); }
        if (ThemeEmoticon != null) { Flags = Flags.SetBit(27); }
        if (/*RequestsPending != 0 && */RequestsPending.HasValue) { Flags = Flags.SetBit(28); }
        if (RecentRequesters?.Count > 0) { Flags = Flags.SetBit(28); }
        if (DefaultSendAs != null) { Flags = Flags.SetBit(29); }
        if (AvailableReactions != null) { Flags = Flags.SetBit(30); }
        if (/*ReactionsLimit != 0 && */ReactionsLimit.HasValue) { Flags2 = Flags2.SetBit(13); }
        if (Stories != null) { Flags2 = Flags2.SetBit(4); }
        if (Wallpaper != null) { Flags2 = Flags2.SetBit(7); }
        if (/*BoostsApplied != 0 && */BoostsApplied.HasValue) { Flags2 = Flags2.SetBit(8); }
        if (/*BoostsUnrestrict != 0 && */BoostsUnrestrict.HasValue) { Flags2 = Flags2.SetBit(9); }
        if (Emojiset != null) { Flags2 = Flags2.SetBit(10); }
        if (BotVerification != null) { Flags2 = Flags2.SetBit(17); }
        if (/*StargiftsCount != 0 && */StargiftsCount.HasValue) { Flags2 = Flags2.SetBit(18); }
        if (/*SendPaidMessagesStars != 0 &&*/ SendPaidMessagesStars.HasValue) { Flags2 = Flags2.SetBit(21); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Flags2);
        writer.Write(Id);
        writer.Write(About);
        if (Flags.IsBitSet(0)) { writer.Write(ParticipantsCount.Value); }
        if (Flags.IsBitSet(1)) { writer.Write(AdminsCount.Value); }
        if (Flags.IsBitSet(2)) { writer.Write(KickedCount.Value); }
        if (Flags.IsBitSet(2)) { writer.Write(BannedCount.Value); }
        if (Flags.IsBitSet(13)) { writer.Write(OnlineCount.Value); }
        writer.Write(ReadInboxMaxId);
        writer.Write(ReadOutboxMaxId);
        writer.Write(UnreadCount);
        writer.Write(ChatPhoto);
        writer.Write(NotifySettings);
        if (Flags.IsBitSet(23)) { writer.Write(ExportedInvite); }
        writer.Write(BotInfo);
        if (Flags.IsBitSet(4)) { writer.Write(MigratedFromChatId.Value); }
        if (Flags.IsBitSet(4)) { writer.Write(MigratedFromMaxId.Value); }
        if (Flags.IsBitSet(5)) { writer.Write(PinnedMsgId.Value); }
        if (Flags.IsBitSet(8)) { writer.Write(Stickerset); }
        if (Flags.IsBitSet(9)) { writer.Write(AvailableMinId.Value); }
        if (Flags.IsBitSet(11)) { writer.Write(FolderId.Value); }
        if (Flags.IsBitSet(14)) { writer.Write(LinkedChatId.Value); }
        if (Flags.IsBitSet(15)) { writer.Write(Location); }
        if (Flags.IsBitSet(17)) { writer.Write(SlowmodeSeconds.Value); }
        if (Flags.IsBitSet(18)) { writer.Write(SlowmodeNextSendDate.Value); }
        if (Flags.IsBitSet(12)) { writer.Write(StatsDc.Value); }
        writer.Write(Pts);
        if (Flags.IsBitSet(21)) { writer.Write(Call); }
        if (Flags.IsBitSet(24)) { writer.Write(TtlPeriod.Value); }
        if (Flags.IsBitSet(25)) { writer.Write(PendingSuggestions); }
        if (Flags.IsBitSet(26)) { writer.Write(GroupcallDefaultJoinAs); }
        if (Flags.IsBitSet(27)) { writer.Write(ThemeEmoticon); }
        if (Flags.IsBitSet(28)) { writer.Write(RequestsPending.Value); }
        if (Flags.IsBitSet(28)) { writer.Write(RecentRequesters); }
        if (Flags.IsBitSet(29)) { writer.Write(DefaultSendAs); }
        if (Flags.IsBitSet(30)) { writer.Write(AvailableReactions); }
        if (Flags2.IsBitSet(13)) { writer.Write(ReactionsLimit.Value); }
        if (Flags2.IsBitSet(4)) { writer.Write(Stories); }
        if (Flags2.IsBitSet(7)) { writer.Write(Wallpaper); }
        if (Flags2.IsBitSet(8)) { writer.Write(BoostsApplied.Value); }
        if (Flags2.IsBitSet(9)) { writer.Write(BoostsUnrestrict.Value); }
        if (Flags2.IsBitSet(10)) { writer.Write(Emojiset); }
        if (Flags2.IsBitSet(17)) { writer.Write(BotVerification); }
        if (Flags2.IsBitSet(18)) { writer.Write(StargiftsCount.Value); }
        if (Flags2.IsBitSet(21)) { writer.Write(SendPaidMessagesStars.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(3)) { CanViewParticipants = true; }
        if (Flags.IsBitSet(6)) { CanSetUsername = true; }
        if (Flags.IsBitSet(7)) { CanSetStickers = true; }
        if (Flags.IsBitSet(10)) { HiddenPrehistory = true; }
        if (Flags.IsBitSet(16)) { CanSetLocation = true; }
        if (Flags.IsBitSet(19)) { HasScheduled = true; }
        if (Flags.IsBitSet(20)) { CanViewStats = true; }
        if (Flags.IsBitSet(22)) { Blocked = true; }
        Flags2 = buffer.ReadInt32();
        if (Flags2.IsBitSet(0)) { CanDeleteChannel = true; }
        if (Flags2.IsBitSet(1)) { Antispam = true; }
        if (Flags2.IsBitSet(2)) { ParticipantsHidden = true; }
        if (Flags2.IsBitSet(3)) { TranslationsDisabled = true; }
        if (Flags2.IsBitSet(5)) { StoriesPinnedAvailable = true; }
        if (Flags2.IsBitSet(6)) { ViewForumAsMessages = true; }
        if (Flags2.IsBitSet(11)) { RestrictedSponsored = true; }
        if (Flags2.IsBitSet(12)) { CanViewRevenue = true; }
        if (Flags2.IsBitSet(14)) { PaidMediaAllowed = true; }
        if (Flags2.IsBitSet(15)) { CanViewStarsRevenue = true; }
        if (Flags2.IsBitSet(16)) { PaidReactionsAvailable = true; }
        if (Flags2.IsBitSet(19)) { StargiftsAvailable = true; }
        if (Flags2.IsBitSet(20)) { PaidMessagesAvailable = true; }
        Id = buffer.ReadInt64();
        About = buffer.ReadString();
        if (Flags.IsBitSet(0)) { ParticipantsCount = buffer.ReadInt32(); }
        if (Flags.IsBitSet(1)) { AdminsCount = buffer.ReadInt32(); }
        if (Flags.IsBitSet(2)) { KickedCount = buffer.ReadInt32(); }
        if (Flags.IsBitSet(2)) { BannedCount = buffer.ReadInt32(); }
        if (Flags.IsBitSet(13)) { OnlineCount = buffer.ReadInt32(); }
        ReadInboxMaxId = buffer.ReadInt32();
        ReadOutboxMaxId = buffer.ReadInt32();
        UnreadCount = buffer.ReadInt32();
        ChatPhoto = buffer.Read<MyTelegram.Schema.IPhoto>();
        NotifySettings = buffer.Read<MyTelegram.Schema.IPeerNotifySettings>();
        if (Flags.IsBitSet(23)) { ExportedInvite = buffer.Read<MyTelegram.Schema.IExportedChatInvite>(); }
        BotInfo = buffer.Read<TVector<MyTelegram.Schema.IBotInfo>>();
        if (Flags.IsBitSet(4)) { MigratedFromChatId = buffer.ReadInt64(); }
        if (Flags.IsBitSet(4)) { MigratedFromMaxId = buffer.ReadInt32(); }
        if (Flags.IsBitSet(5)) { PinnedMsgId = buffer.ReadInt32(); }
        if (Flags.IsBitSet(8)) { Stickerset = buffer.Read<MyTelegram.Schema.IStickerSet>(); }
        if (Flags.IsBitSet(9)) { AvailableMinId = buffer.ReadInt32(); }
        if (Flags.IsBitSet(11)) { FolderId = buffer.ReadInt32(); }
        if (Flags.IsBitSet(14)) { LinkedChatId = buffer.ReadInt64(); }
        if (Flags.IsBitSet(15)) { Location = buffer.Read<MyTelegram.Schema.IChannelLocation>(); }
        if (Flags.IsBitSet(17)) { SlowmodeSeconds = buffer.ReadInt32(); }
        if (Flags.IsBitSet(18)) { SlowmodeNextSendDate = buffer.ReadInt32(); }
        if (Flags.IsBitSet(12)) { StatsDc = buffer.ReadInt32(); }
        Pts = buffer.ReadInt32();
        if (Flags.IsBitSet(21)) { Call = buffer.Read<MyTelegram.Schema.IInputGroupCall>(); }
        if (Flags.IsBitSet(24)) { TtlPeriod = buffer.ReadInt32(); }
        if (Flags.IsBitSet(25)) { PendingSuggestions = buffer.Read<TVector<string>>(); }
        if (Flags.IsBitSet(26)) { GroupcallDefaultJoinAs = buffer.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags.IsBitSet(27)) { ThemeEmoticon = buffer.ReadString(); }
        if (Flags.IsBitSet(28)) { RequestsPending = buffer.ReadInt32(); }
        if (Flags.IsBitSet(28)) { RecentRequesters = buffer.Read<TVector<long>>(); }
        if (Flags.IsBitSet(29)) { DefaultSendAs = buffer.Read<MyTelegram.Schema.IPeer>(); }
        if (Flags.IsBitSet(30)) { AvailableReactions = buffer.Read<MyTelegram.Schema.IChatReactions>(); }
        if (Flags2.IsBitSet(13)) { ReactionsLimit = buffer.ReadInt32(); }
        if (Flags2.IsBitSet(4)) { Stories = buffer.Read<MyTelegram.Schema.IPeerStories>(); }
        if (Flags2.IsBitSet(7)) { Wallpaper = buffer.Read<MyTelegram.Schema.IWallPaper>(); }
        if (Flags2.IsBitSet(8)) { BoostsApplied = buffer.ReadInt32(); }
        if (Flags2.IsBitSet(9)) { BoostsUnrestrict = buffer.ReadInt32(); }
        if (Flags2.IsBitSet(10)) { Emojiset = buffer.Read<MyTelegram.Schema.IStickerSet>(); }
        if (Flags2.IsBitSet(17)) { BotVerification = buffer.Read<MyTelegram.Schema.IBotVerification>(); }
        if (Flags2.IsBitSet(18)) { StargiftsCount = buffer.ReadInt32(); }
        if (Flags2.IsBitSet(21)) { SendPaidMessagesStars = buffer.ReadInt64(); }
    }
}