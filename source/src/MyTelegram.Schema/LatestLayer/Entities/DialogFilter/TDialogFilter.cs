// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Dialog filter AKA <a href="https://corefork.telegram.org/api/folders">folder</a>
/// See <a href="https://corefork.telegram.org/constructor/dialogFilter" />
///</summary>
[TlObject(0xaa472651)]
public sealed class TDialogFilter : IDialogFilter
{
    public uint ConstructorId => 0xaa472651;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether to include all contacts in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Contacts { get; set; }

    ///<summary>
    /// Whether to include all non-contacts in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool NonContacts { get; set; }

    ///<summary>
    /// Whether to include all groups in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Groups { get; set; }

    ///<summary>
    /// Whether to include all channels in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Broadcasts { get; set; }

    ///<summary>
    /// Whether to include all bots in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Bots { get; set; }

    ///<summary>
    /// Whether to exclude muted chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeMuted { get; set; }

    ///<summary>
    /// Whether to exclude read chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeRead { get; set; }

    ///<summary>
    /// Whether to exclude archived chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ExcludeArchived { get; set; }
    public bool TitleNoanimate { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/folders">Folder</a> ID
    ///</summary>
    public int Id { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/folders">Folder</a> name (max 12 UTF-8 chars)
    /// See <a href="https://corefork.telegram.org/type/TextWithEntities" />
    ///</summary>
    public MyTelegram.Schema.ITextWithEntities Title { get; set; }

    ///<summary>
    /// Emoji to use as icon for the folder.
    ///</summary>
    public string? Emoticon { get; set; }

    ///<summary>
    /// A color ID for the <a href="https://corefork.telegram.org/api/folders#folder-tags">folder tag associated to this folder, see here </a> for more info.
    ///</summary>
    public int? Color { get; set; }

    ///<summary>
    /// Pinned chats, <a href="https://corefork.telegram.org/api/folders">folders</a> can have unlimited pinned chats
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> PinnedPeers { get; set; }

    ///<summary>
    /// Include the following chats in this <a href="https://corefork.telegram.org/api/folders">folder</a>
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> IncludePeers { get; set; }

    ///<summary>
    /// Exclude the following chats from this <a href="https://corefork.telegram.org/api/folders">folder</a>
    ///</summary>
    public TVector<MyTelegram.Schema.IInputPeer> ExcludePeers { get; set; }

    public void ComputeFlag()
    {
        if (Contacts) { Flags = Flags.SetBit(0); }
        if (NonContacts) { Flags = Flags.SetBit(1); }
        if (Groups) { Flags = Flags.SetBit(2); }
        if (Broadcasts) { Flags = Flags.SetBit(3); }
        if (Bots) { Flags = Flags.SetBit(4); }
        if (ExcludeMuted) { Flags = Flags.SetBit(11); }
        if (ExcludeRead) { Flags = Flags.SetBit(12); }
        if (ExcludeArchived) { Flags = Flags.SetBit(13); }
        if (TitleNoanimate) { Flags = Flags.SetBit(28); }
        if (Emoticon != null) { Flags = Flags.SetBit(25); }
        if (/*Color != 0 && */Color.HasValue) { Flags = Flags.SetBit(27); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(Title);
        if (Flags.IsBitSet(25)) { writer.Write(Emoticon); }
        if (Flags.IsBitSet(27)) { writer.Write(Color.Value); }
        writer.Write(PinnedPeers);
        writer.Write(IncludePeers);
        writer.Write(ExcludePeers);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Contacts = true; }
        if (Flags.IsBitSet(1)) { NonContacts = true; }
        if (Flags.IsBitSet(2)) { Groups = true; }
        if (Flags.IsBitSet(3)) { Broadcasts = true; }
        if (Flags.IsBitSet(4)) { Bots = true; }
        if (Flags.IsBitSet(11)) { ExcludeMuted = true; }
        if (Flags.IsBitSet(12)) { ExcludeRead = true; }
        if (Flags.IsBitSet(13)) { ExcludeArchived = true; }
        if (Flags.IsBitSet(28)) { TitleNoanimate = true; }
        Id = buffer.ReadInt32();
        Title = buffer.Read<MyTelegram.Schema.ITextWithEntities>();
        if (Flags.IsBitSet(25)) { Emoticon = buffer.ReadString(); }
        if (Flags.IsBitSet(27)) { Color = buffer.ReadInt32(); }
        PinnedPeers = buffer.Read<TVector<MyTelegram.Schema.IInputPeer>>();
        IncludePeers = buffer.Read<TVector<MyTelegram.Schema.IInputPeer>>();
        ExcludePeers = buffer.Read<TVector<MyTelegram.Schema.IInputPeer>>();
    }
}