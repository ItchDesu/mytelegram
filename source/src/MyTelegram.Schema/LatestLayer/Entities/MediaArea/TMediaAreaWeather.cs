// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents a <a href="https://corefork.telegram.org/api/stories#weather">weather widget </a>.
/// See <a href="https://corefork.telegram.org/constructor/mediaAreaWeather" />
///</summary>
[TlObject(0x49a6549c)]
public sealed class TMediaAreaWeather : IMediaArea
{
    public uint ConstructorId => 0x49a6549c;
    ///<summary>
    /// The size and location of the media area corresponding to the widget on top of the story media.
    /// See <a href="https://corefork.telegram.org/type/MediaAreaCoordinates" />
    ///</summary>
    public MyTelegram.Schema.IMediaAreaCoordinates Coordinates { get; set; }

    ///<summary>
    /// Weather emoji, should be rendered as an <a href="https://corefork.telegram.org/api/animated-emojis">animated emoji</a>.
    ///</summary>
    public string Emoji { get; set; }

    ///<summary>
    /// Temperature in degrees Celsius.
    ///</summary>
    public double TemperatureC { get; set; }

    ///<summary>
    /// ARGB background color.
    ///</summary>
    public int Color { get; set; }

    public void ComputeFlag()
    {

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Coordinates);
        writer.Write(Emoji);
        writer.Write(TemperatureC);
        writer.Write(Color);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Coordinates = buffer.Read<MyTelegram.Schema.IMediaAreaCoordinates>();
        Emoji = buffer.ReadString();
        TemperatureC = buffer.ReadDouble();
        Color = buffer.ReadInt32();
    }
}