// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// <a href="https://corefork.telegram.org/api/wallpapers">Wallpaper</a> rendering information.
/// See <a href="https://corefork.telegram.org/constructor/wallPaperSettings" />
///</summary>
[TlObject(0x372efcd0)]
public sealed class TWallPaperSettings : IWallPaperSettings
{
    public uint ConstructorId => 0x372efcd0;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/wallpapers#image-wallpapers">image wallpapers </a>: if set, the JPEG must be downscaled to fit in 450x450 square and then box-blurred with radius 12.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Blur { get; set; }

    ///<summary>
    /// If set, the background needs to be slightly moved when the device is rotated.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Motion { get; set; }

    ///<summary>
    /// Used for <a href="https://corefork.telegram.org/api/wallpapers#solid-fill">solid </a>, <a href="https://corefork.telegram.org/api/wallpapers#gradient-fill">gradient </a> and <a href="https://corefork.telegram.org/api/wallpapers#freeform-gradient-fill">freeform gradient </a> fills.
    ///</summary>
    public int? BackgroundColor { get; set; }

    ///<summary>
    /// Used for <a href="https://corefork.telegram.org/api/wallpapers#gradient-fill">gradient </a> and <a href="https://corefork.telegram.org/api/wallpapers#freeform-gradient-fill">freeform gradient </a> fills.
    ///</summary>
    public int? SecondBackgroundColor { get; set; }

    ///<summary>
    /// Used for <a href="https://corefork.telegram.org/api/wallpapers#freeform-gradient-fill">freeform gradient </a> fills.
    ///</summary>
    public int? ThirdBackgroundColor { get; set; }

    ///<summary>
    /// Used for <a href="https://corefork.telegram.org/api/wallpapers#freeform-gradient-fill">freeform gradient </a> fills.
    ///</summary>
    public int? FourthBackgroundColor { get; set; }

    ///<summary>
    /// Used for <a href="https://corefork.telegram.org/api/wallpapers#pattern-wallpapers">pattern wallpapers </a>.
    ///</summary>
    public int? Intensity { get; set; }

    ///<summary>
    /// Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45.
    ///</summary>
    public int? Rotation { get; set; }

    ///<summary>
    /// If set, this wallpaper can be used as a channel wallpaper and is represented by the specified UTF-8 emoji.
    ///</summary>
    public string? Emoticon { get; set; }

    public void ComputeFlag()
    {
        if (Blur) { Flags = Flags.SetBit(1); }
        if (Motion) { Flags = Flags.SetBit(2); }
        if (/*BackgroundColor != 0 && */BackgroundColor.HasValue) { Flags = Flags.SetBit(0); }
        if (/*SecondBackgroundColor != 0 && */SecondBackgroundColor.HasValue) { Flags = Flags.SetBit(4); }
        if (/*ThirdBackgroundColor != 0 && */ThirdBackgroundColor.HasValue) { Flags = Flags.SetBit(5); }
        if (/*FourthBackgroundColor != 0 && */FourthBackgroundColor.HasValue) { Flags = Flags.SetBit(6); }
        if (/*Intensity != 0 && */Intensity.HasValue) { Flags = Flags.SetBit(3); }
        if (/*Rotation != 0 && */Rotation.HasValue) { Flags = Flags.SetBit(4); }
        if (Emoticon != null) { Flags = Flags.SetBit(7); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        if (Flags.IsBitSet(0)) { writer.Write(BackgroundColor.Value); }
        if (Flags.IsBitSet(4)) { writer.Write(SecondBackgroundColor.Value); }
        if (Flags.IsBitSet(5)) { writer.Write(ThirdBackgroundColor.Value); }
        if (Flags.IsBitSet(6)) { writer.Write(FourthBackgroundColor.Value); }
        if (Flags.IsBitSet(3)) { writer.Write(Intensity.Value); }
        if (Flags.IsBitSet(4)) { writer.Write(Rotation.Value); }
        if (Flags.IsBitSet(7)) { writer.Write(Emoticon); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(1)) { Blur = true; }
        if (Flags.IsBitSet(2)) { Motion = true; }
        if (Flags.IsBitSet(0)) { BackgroundColor = buffer.ReadInt32(); }
        if (Flags.IsBitSet(4)) { SecondBackgroundColor = buffer.ReadInt32(); }
        if (Flags.IsBitSet(5)) { ThirdBackgroundColor = buffer.ReadInt32(); }
        if (Flags.IsBitSet(6)) { FourthBackgroundColor = buffer.ReadInt32(); }
        if (Flags.IsBitSet(3)) { Intensity = buffer.ReadInt32(); }
        if (Flags.IsBitSet(4)) { Rotation = buffer.ReadInt32(); }
        if (Flags.IsBitSet(7)) { Emoticon = buffer.ReadString(); }
    }
}