// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Indicates a channel/supergroup we can't access because we were banned, or for some other reason.
/// See <a href="https://corefork.telegram.org/constructor/channelForbidden" />
///</summary>
[TlObject(0x17d493d5)]
public sealed class TChannelForbidden : IChat
{
    public uint ConstructorId => 0x17d493d5;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Is this a channel
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Broadcast { get; set; }

    ///<summary>
    /// Is this a supergroup
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Megagroup { get; set; }

    ///<summary>
    /// Channel ID
    ///</summary>
    public long Id { get; set; }

    ///<summary>
    /// Access hash
    ///</summary>
    public long AccessHash { get; set; }

    ///<summary>
    /// Title
    ///</summary>
    public string Title { get; set; }

    ///<summary>
    /// The ban is valid until the specified date
    ///</summary>
    public int? UntilDate { get; set; }

    public void ComputeFlag()
    {
        if (Broadcast) { Flags = Flags.SetBit(5); }
        if (Megagroup) { Flags = Flags.SetBit(8); }
        if (/*UntilDate != 0 && */UntilDate.HasValue) { Flags = Flags.SetBit(16); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Id);
        writer.Write(AccessHash);
        writer.Write(Title);
        if (Flags.IsBitSet(16)) { writer.Write(UntilDate.Value); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(5)) { Broadcast = true; }
        if (Flags.IsBitSet(8)) { Megagroup = true; }
        Id = buffer.ReadInt64();
        AccessHash = buffer.ReadInt64();
        Title = buffer.ReadString();
        if (Flags.IsBitSet(16)) { UntilDate = buffer.ReadInt32(); }
    }
}