// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Represents the rights of an admin in a <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>.
/// See <a href="https://corefork.telegram.org/constructor/chatAdminRights" />
///</summary>
[TlObject(0x5fb224d5)]
public sealed class TChatAdminRights : IChatAdminRights
{
    public uint ConstructorId => 0x5fb224d5;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// If set, allows the admin to modify the description of the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ChangeInfo { get; set; }

    ///<summary>
    /// If set, allows the admin to post messages in the <a href="https://corefork.telegram.org/api/channel">channel</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PostMessages { get; set; }

    ///<summary>
    /// If set, allows the admin to also edit messages from other admins in the <a href="https://corefork.telegram.org/api/channel">channel</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool EditMessages { get; set; }

    ///<summary>
    /// If set, allows the admin to also delete messages from other admins in the <a href="https://corefork.telegram.org/api/channel">channel</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool DeleteMessages { get; set; }

    ///<summary>
    /// If set, allows the admin to ban users from the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BanUsers { get; set; }

    ///<summary>
    /// If set, allows the admin to invite users in the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool InviteUsers { get; set; }

    ///<summary>
    /// If set, allows the admin to pin messages in the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PinMessages { get; set; }

    ///<summary>
    /// If set, allows the admin to add other admins with the same (or more limited) permissions in the <a href="https://corefork.telegram.org/api/channel">channel/supergroup</a>
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AddAdmins { get; set; }

    ///<summary>
    /// Whether this admin is anonymous
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Anonymous { get; set; }

    ///<summary>
    /// If set, allows the admin to change group call/livestream settings
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ManageCall { get; set; }

    ///<summary>
    /// Set this flag if none of the other flags are set, but you still want the user to be an admin: if this or any of the other flags are set, the admin can get the chat <a href="https://corefork.telegram.org/api/recent-actions">admin log</a>, get <a href="https://corefork.telegram.org/api/stats">chat statistics</a>, get <a href="https://corefork.telegram.org/api/stats">message statistics in channels</a>, get channel members, see anonymous administrators in supergroups and ignore slow mode.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Other { get; set; }

    ///<summary>
    /// If set, allows the admin to create, delete or modify <a href="https://corefork.telegram.org/api/forum#forum-topics">forum topics </a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ManageTopics { get; set; }

    ///<summary>
    /// If set, allows the admin to post <a href="https://corefork.telegram.org/api/stories">stories</a> as the <a href="https://corefork.telegram.org/api/channel">channel</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PostStories { get; set; }

    ///<summary>
    /// If set, allows the admin to edit <a href="https://corefork.telegram.org/api/stories">stories</a> posted by the other admins of the <a href="https://corefork.telegram.org/api/channel">channel</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool EditStories { get; set; }

    ///<summary>
    /// If set, allows the admin to delete <a href="https://corefork.telegram.org/api/stories">stories</a> posted by the other admins of the <a href="https://corefork.telegram.org/api/channel">channel</a>.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool DeleteStories { get; set; }
    public bool ManageDirectMessages { get; set; }

    public void ComputeFlag()
    {
        if (ChangeInfo) { Flags = Flags.SetBit(0); }
        if (PostMessages) { Flags = Flags.SetBit(1); }
        if (EditMessages) { Flags = Flags.SetBit(2); }
        if (DeleteMessages) { Flags = Flags.SetBit(3); }
        if (BanUsers) { Flags = Flags.SetBit(4); }
        if (InviteUsers) { Flags = Flags.SetBit(5); }
        if (PinMessages) { Flags = Flags.SetBit(7); }
        if (AddAdmins) { Flags = Flags.SetBit(9); }
        if (Anonymous) { Flags = Flags.SetBit(10); }
        if (ManageCall) { Flags = Flags.SetBit(11); }
        if (Other) { Flags = Flags.SetBit(12); }
        if (ManageTopics) { Flags = Flags.SetBit(13); }
        if (PostStories) { Flags = Flags.SetBit(14); }
        if (EditStories) { Flags = Flags.SetBit(15); }
        if (DeleteStories) { Flags = Flags.SetBit(16); }
        if (ManageDirectMessages) { Flags = Flags.SetBit(17); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);

    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { ChangeInfo = true; }
        if (Flags.IsBitSet(1)) { PostMessages = true; }
        if (Flags.IsBitSet(2)) { EditMessages = true; }
        if (Flags.IsBitSet(3)) { DeleteMessages = true; }
        if (Flags.IsBitSet(4)) { BanUsers = true; }
        if (Flags.IsBitSet(5)) { InviteUsers = true; }
        if (Flags.IsBitSet(7)) { PinMessages = true; }
        if (Flags.IsBitSet(9)) { AddAdmins = true; }
        if (Flags.IsBitSet(10)) { Anonymous = true; }
        if (Flags.IsBitSet(11)) { ManageCall = true; }
        if (Flags.IsBitSet(12)) { Other = true; }
        if (Flags.IsBitSet(13)) { ManageTopics = true; }
        if (Flags.IsBitSet(14)) { PostStories = true; }
        if (Flags.IsBitSet(15)) { EditStories = true; }
        if (Flags.IsBitSet(16)) { DeleteStories = true; }
        if (Flags.IsBitSet(17)) { ManageDirectMessages = true; }
    }
}