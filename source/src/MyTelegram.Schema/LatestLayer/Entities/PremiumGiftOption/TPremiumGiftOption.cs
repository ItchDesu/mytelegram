// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Telegram Premium gift option
/// See <a href="https://corefork.telegram.org/constructor/premiumGiftOption" />
///</summary>
[TlObject(0x74c34319)]
public sealed class TPremiumGiftOption : IPremiumGiftOption
{
    public uint ConstructorId => 0x74c34319;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Duration of gifted Telegram Premium subscription
    ///</summary>
    public int Months { get; set; }

    ///<summary>
    /// Three-letter ISO 4217 <a href="https://corefork.telegram.org/bots/payments#supported-currencies">currency</a> code
    ///</summary>
    public string Currency { get; set; }

    ///<summary>
    /// Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href="https://corefork.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    ///</summary>
    public long Amount { get; set; }

    ///<summary>
    /// An <a href="https://corefork.telegram.org/api/links#invoice-links">invoice deep link </a> to an invoice for in-app payment, using the official Premium bot; may be empty if direct payment isn't available.
    ///</summary>
    public string BotUrl { get; set; }

    ///<summary>
    /// An identifier for the App Store/Play Store product associated with the Premium gift.
    ///</summary>
    public string? StoreProduct { get; set; }

    public void ComputeFlag()
    {
        if (StoreProduct != null) { Flags = Flags.SetBit(0); }
    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Months);
        writer.Write(Currency);
        writer.Write(Amount);
        writer.Write(BotUrl);
        if (Flags.IsBitSet(0)) { writer.Write(StoreProduct); }
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        Months = buffer.ReadInt32();
        Currency = buffer.ReadString();
        Amount = buffer.ReadInt64();
        BotUrl = buffer.ReadString();
        if (Flags.IsBitSet(0)) { StoreProduct = buffer.ReadString(); }
    }
}