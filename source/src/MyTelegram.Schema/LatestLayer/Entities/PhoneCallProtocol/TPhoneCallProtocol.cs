// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Protocol info for libtgvoip
/// See <a href="https://corefork.telegram.org/constructor/phoneCallProtocol" />
///</summary>
[TlObject(0xfc878fc8)]
public sealed class TPhoneCallProtocol : IPhoneCallProtocol
{
    public uint ConstructorId => 0xfc878fc8;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether to allow P2P connection to the other participant
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool UdpP2p { get; set; }

    ///<summary>
    /// Whether to allow connection to the other participants through the reflector servers
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool UdpReflector { get; set; }

    ///<summary>
    /// Minimum layer for remote libtgvoip
    ///</summary>
    public int MinLayer { get; set; }

    ///<summary>
    /// Maximum layer for remote libtgvoip
    ///</summary>
    public int MaxLayer { get; set; }

    ///<summary>
    /// When using <a href="https://corefork.telegram.org/method/phone.requestCall">phone.requestCall</a> and <a href="https://corefork.telegram.org/method/phone.acceptCall">phone.acceptCall</a>, specify all library versions supported by the client. <br>The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's <a href="https://corefork.telegram.org/method/phone.acceptCall">phone.acceptCall</a> and in the <a href="https://corefork.telegram.org/constructor/phoneCallAccepted">phoneCallAccepted</a> update received by the caller.
    ///</summary>
    public TVector<string> LibraryVersions { get; set; }

    public void ComputeFlag()
    {
        if (UdpP2p) { Flags = Flags.SetBit(0); }
        if (UdpReflector) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(MinLayer);
        writer.Write(MaxLayer);
        writer.Write(LibraryVersions);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { UdpP2p = true; }
        if (Flags.IsBitSet(1)) { UdpReflector = true; }
        MinLayer = buffer.ReadInt32();
        MaxLayer = buffer.ReadInt32();
        LibraryVersions = buffer.Read<TVector<string>>();
    }
}