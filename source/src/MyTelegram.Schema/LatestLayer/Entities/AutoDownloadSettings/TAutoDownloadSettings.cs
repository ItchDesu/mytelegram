// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// Autodownload settings
/// See <a href="https://corefork.telegram.org/constructor/autoDownloadSettings" />
///</summary>
[TlObject(0xbaa57628)]
public sealed class TAutoDownloadSettings : IAutoDownloadSettings
{
    public uint ConstructorId => 0xbaa57628;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Disable automatic media downloads?
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Disabled { get; set; }

    ///<summary>
    /// Whether to preload the first seconds of videos larger than the specified limit
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool VideoPreloadLarge { get; set; }

    ///<summary>
    /// Whether to preload the next audio track when you're listening to music
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool AudioPreloadNext { get; set; }

    ///<summary>
    /// Whether to enable data saving mode in phone calls
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool PhonecallsLessData { get; set; }

    ///<summary>
    /// Whether to preload <a href="https://corefork.telegram.org/api/stories">stories</a>; in particular, the first <a href="https://corefork.telegram.org/constructor/documentAttributeVideo">documentAttributeVideo</a>.<code>preload_prefix_size</code> bytes of story videos should be preloaded.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool StoriesPreload { get; set; }

    ///<summary>
    /// Maximum size of photos to preload
    ///</summary>
    public int PhotoSizeMax { get; set; }

    ///<summary>
    /// Maximum size of videos to preload
    ///</summary>
    public long VideoSizeMax { get; set; }

    ///<summary>
    /// Maximum size of other files to preload
    ///</summary>
    public long FileSizeMax { get; set; }

    ///<summary>
    /// Maximum suggested bitrate for <strong>uploading</strong> videos
    ///</summary>
    public int VideoUploadMaxbitrate { get; set; }

    ///<summary>
    /// A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files smaller than 20MB.
    ///</summary>
    public int SmallQueueActiveOperationsMax { get; set; }

    ///<summary>
    /// A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files bigger than 20MB.
    ///</summary>
    public int LargeQueueActiveOperationsMax { get; set; }

    public void ComputeFlag()
    {
        if (Disabled) { Flags = Flags.SetBit(0); }
        if (VideoPreloadLarge) { Flags = Flags.SetBit(1); }
        if (AudioPreloadNext) { Flags = Flags.SetBit(2); }
        if (PhonecallsLessData) { Flags = Flags.SetBit(3); }
        if (StoriesPreload) { Flags = Flags.SetBit(4); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(PhotoSizeMax);
        writer.Write(VideoSizeMax);
        writer.Write(FileSizeMax);
        writer.Write(VideoUploadMaxbitrate);
        writer.Write(SmallQueueActiveOperationsMax);
        writer.Write(LargeQueueActiveOperationsMax);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Disabled = true; }
        if (Flags.IsBitSet(1)) { VideoPreloadLarge = true; }
        if (Flags.IsBitSet(2)) { AudioPreloadNext = true; }
        if (Flags.IsBitSet(3)) { PhonecallsLessData = true; }
        if (Flags.IsBitSet(4)) { StoriesPreload = true; }
        PhotoSizeMax = buffer.ReadInt32();
        VideoSizeMax = buffer.ReadInt64();
        FileSizeMax = buffer.ReadInt64();
        VideoUploadMaxbitrate = buffer.ReadInt32();
        SmallQueueActiveOperationsMax = buffer.ReadInt32();
        LargeQueueActiveOperationsMax = buffer.ReadInt32();
    }
}