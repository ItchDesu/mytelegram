// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A <a href="https://corefork.telegram.org/api/giveaways">giveaway</a> with public winners has finished, this constructor contains info about the winners.
/// See <a href="https://corefork.telegram.org/constructor/messageMediaGiveawayResults" />
///</summary>
[TlObject(0xceaa3ea1)]
public sealed class TMessageMediaGiveawayResults : IMessageMedia
{
    public uint ConstructorId => 0xceaa3ea1;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// If set, only new subscribers starting from the giveaway creation date participated in the giveaway.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool OnlyNewSubscribers { get; set; }

    ///<summary>
    /// If set, the giveaway was canceled and was fully refunded.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Refunded { get; set; }

    ///<summary>
    /// ID of the channel/supergroup that was automatically <a href="https://corefork.telegram.org/api/boost">boosted</a> by the winners of the giveaway for duration of the Premium subscription.
    ///</summary>
    public long ChannelId { get; set; }

    ///<summary>
    /// Number of other channels that participated in the giveaway.
    ///</summary>
    public int? AdditionalPeersCount { get; set; }

    ///<summary>
    /// Identifier of the message with the giveaway in <code>channel_id</code>.
    ///</summary>
    public int LaunchMsgId { get; set; }

    ///<summary>
    /// Total number of winners in the giveaway.
    ///</summary>
    public int WinnersCount { get; set; }

    ///<summary>
    /// Number of not-yet-claimed prizes.
    ///</summary>
    public int UnclaimedCount { get; set; }

    ///<summary>
    /// Up to 100 user identifiers of the winners of the giveaway.
    ///</summary>
    public TVector<long> Winners { get; set; }

    ///<summary>
    /// Duration in months of each <a href="https://corefork.telegram.org/api/premium">Telegram Premium</a> subscription in the giveaway.
    ///</summary>
    public int? Months { get; set; }

    ///<summary>
    /// For <a href="https://corefork.telegram.org/api/stars#star-giveaways">Telegram Star giveaways</a>, the total number of Telegram Stars being given away.
    ///</summary>
    public long? Stars { get; set; }

    ///<summary>
    /// Can contain a textual description of additional giveaway prizes.
    ///</summary>
    public string? PrizeDescription { get; set; }

    ///<summary>
    /// Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in initial parameters of the giveaway.
    ///</summary>
    public int UntilDate { get; set; }

    public void ComputeFlag()
    {
        if (OnlyNewSubscribers) { Flags = Flags.SetBit(0); }
        if (Refunded) { Flags = Flags.SetBit(2); }
        if (/*AdditionalPeersCount != 0 && */AdditionalPeersCount.HasValue) { Flags = Flags.SetBit(3); }
        if (/*Months != 0 && */Months.HasValue) { Flags = Flags.SetBit(4); }
        if (/*Stars != 0 &&*/ Stars.HasValue) { Flags = Flags.SetBit(5); }
        if (PrizeDescription != null) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(ChannelId);
        if (Flags.IsBitSet(3)) { writer.Write(AdditionalPeersCount.Value); }
        writer.Write(LaunchMsgId);
        writer.Write(WinnersCount);
        writer.Write(UnclaimedCount);
        writer.Write(Winners);
        if (Flags.IsBitSet(4)) { writer.Write(Months.Value); }
        if (Flags.IsBitSet(5)) { writer.Write(Stars.Value); }
        if (Flags.IsBitSet(1)) { writer.Write(PrizeDescription); }
        writer.Write(UntilDate);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { OnlyNewSubscribers = true; }
        if (Flags.IsBitSet(2)) { Refunded = true; }
        ChannelId = buffer.ReadInt64();
        if (Flags.IsBitSet(3)) { AdditionalPeersCount = buffer.ReadInt32(); }
        LaunchMsgId = buffer.ReadInt32();
        WinnersCount = buffer.ReadInt32();
        UnclaimedCount = buffer.ReadInt32();
        Winners = buffer.Read<TVector<long>>();
        if (Flags.IsBitSet(4)) { Months = buffer.ReadInt32(); }
        if (Flags.IsBitSet(5)) { Stars = buffer.ReadInt64(); }
        if (Flags.IsBitSet(1)) { PrizeDescription = buffer.ReadString(); }
        UntilDate = buffer.ReadInt32();
    }
}