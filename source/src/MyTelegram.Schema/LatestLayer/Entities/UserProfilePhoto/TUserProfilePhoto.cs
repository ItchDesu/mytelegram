// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// User profile photo.
/// See <a href="https://corefork.telegram.org/constructor/userProfilePhoto" />
///</summary>
[TlObject(0x82d1f706)]
public sealed class TUserProfilePhoto : IUserProfilePhoto
{
    public uint ConstructorId => 0x82d1f706;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether an <a href="https://corefork.telegram.org/api/files#animated-profile-pictures">animated profile picture</a> is available for this user
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool HasVideo { get; set; }

    ///<summary>
    /// Whether this profile photo is only visible to us (i.e. it was set using <a href="https://corefork.telegram.org/method/photos.uploadContactProfilePhoto">photos.uploadContactProfilePhoto</a>).
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Personal { get; set; }

    ///<summary>
    /// Identifier of the respective photo
    ///</summary>
    public long PhotoId { get; set; }

    ///<summary>
    /// <a href="https://corefork.telegram.org/api/files#stripped-thumbnails">Stripped thumbnail</a>
    ///</summary>
    public ReadOnlyMemory<byte>? StrippedThumb { get; set; }

    ///<summary>
    /// DC ID where the photo is stored
    ///</summary>
    public int DcId { get; set; }

    public void ComputeFlag()
    {
        if (HasVideo) { Flags = Flags.SetBit(0); }
        if (Personal) { Flags = Flags.SetBit(2); }
        if (StrippedThumb != null) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(PhotoId);
        if (Flags.IsBitSet(1)) { writer.Write(StrippedThumb); }
        writer.Write(DcId);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { HasVideo = true; }
        if (Flags.IsBitSet(2)) { Personal = true; }
        PhotoId = buffer.ReadInt64();
        if (Flags.IsBitSet(1)) { StrippedThumb = buffer.ReadBytes(); }
        DcId = buffer.ReadInt32();
    }
}