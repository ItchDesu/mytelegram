// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema;

///<summary>
/// A certain peer has forwarded the story as a message to a public chat or channel.
/// See <a href="https://corefork.telegram.org/constructor/storyViewPublicForward" />
///</summary>
[TlObject(0x9083670b)]
public sealed class TStoryViewPublicForward : IStoryView
{
    public uint ConstructorId => 0x9083670b;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether we have <a href="https://corefork.telegram.org/api/block">completely blocked</a> this user, including from viewing more of our stories.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Blocked { get; set; }

    ///<summary>
    /// Whether we have <a href="https://corefork.telegram.org/api/block">blocked</a> this user from viewing more of our stories.
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool BlockedMyStoriesFrom { get; set; }

    ///<summary>
    /// The message with the forwarded story.
    /// See <a href="https://corefork.telegram.org/type/Message" />
    ///</summary>
    public MyTelegram.Schema.IMessage Message { get; set; }

    public void ComputeFlag()
    {
        if (Blocked) { Flags = Flags.SetBit(0); }
        if (BlockedMyStoriesFrom) { Flags = Flags.SetBit(1); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Message);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Blocked = true; }
        if (Flags.IsBitSet(1)) { BlockedMyStoriesFrom = true; }
        Message = buffer.Read<MyTelegram.Schema.IMessage>();
    }
}