// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Contacts;

///<summary>
/// Stop getting notifications about <a href="https://corefork.telegram.org/api/discussion">discussion replies</a> of a certain user in <code>@replies</code>
/// <para>Possible errors</para>
/// Code Type Description
/// 400 MSG_ID_INVALID Invalid message ID provided.
/// See <a href="https://corefork.telegram.org/method/contacts.blockFromReplies" />
///</summary>
[TlObject(0x29a8962c)]
public sealed class RequestBlockFromReplies : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0x29a8962c;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether to delete the specified message as well
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool DeleteMessage { get; set; }

    ///<summary>
    /// Whether to delete all <code>@replies</code> messages from this user as well
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool DeleteHistory { get; set; }

    ///<summary>
    /// Whether to also report this user for spam
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool ReportSpam { get; set; }

    ///<summary>
    /// ID of the message in the <a href="https://corefork.telegram.org/api/discussion#replies">@replies</a> chat
    ///</summary>
    public int MsgId { get; set; }

    public void ComputeFlag()
    {
        if (DeleteMessage) { Flags = Flags.SetBit(0); }
        if (DeleteHistory) { Flags = Flags.SetBit(1); }
        if (ReportSpam) { Flags = Flags.SetBit(2); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(MsgId);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { DeleteMessage = true; }
        if (Flags.IsBitSet(1)) { DeleteHistory = true; }
        if (Flags.IsBitSet(2)) { ReportSpam = true; }
        MsgId = buffer.ReadInt32();
    }
}
