// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Chatlists;

///<summary>
/// Info about a <a href="https://corefork.telegram.org/api/links#chat-folder-links">chat folder deep link </a>.
/// See <a href="https://corefork.telegram.org/constructor/chatlists.chatlistInvite" />
///</summary>
[TlObject(0xf10ece2f)]
public sealed class TChatlistInvite : IChatlistInvite
{
    public uint ConstructorId => 0xf10ece2f;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }
    public bool TitleNoanimate { get; set; }

    ///<summary>
    /// Name of the link
    /// See <a href="https://corefork.telegram.org/type/TextWithEntities" />
    ///</summary>
    public MyTelegram.Schema.ITextWithEntities Title { get; set; }

    ///<summary>
    /// Emoji to use as icon for the folder.
    ///</summary>
    public string? Emoticon { get; set; }

    ///<summary>
    /// Supergroups and channels to join
    ///</summary>
    public TVector<MyTelegram.Schema.IPeer> Peers { get; set; }

    ///<summary>
    /// Related chat information
    ///</summary>
    public TVector<MyTelegram.Schema.IChat> Chats { get; set; }

    ///<summary>
    /// Related user information
    ///</summary>
    public TVector<MyTelegram.Schema.IUser> Users { get; set; }

    public void ComputeFlag()
    {
        if (TitleNoanimate) { Flags = Flags.SetBit(1); }
        if (Emoticon != null) { Flags = Flags.SetBit(0); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Title);
        if (Flags.IsBitSet(0)) { writer.Write(Emoticon); }
        writer.Write(Peers);
        writer.Write(Chats);
        writer.Write(Users);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(1)) { TitleNoanimate = true; }
        Title = buffer.Read<MyTelegram.Schema.ITextWithEntities>();
        if (Flags.IsBitSet(0)) { Emoticon = buffer.ReadString(); }
        Peers = buffer.Read<TVector<MyTelegram.Schema.IPeer>>();
        Chats = buffer.Read<TVector<MyTelegram.Schema.IChat>>();
        Users = buffer.Read<TVector<MyTelegram.Schema.IUser>>();
    }
}