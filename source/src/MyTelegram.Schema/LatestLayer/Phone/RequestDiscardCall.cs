// <auto-generated/>
// ReSharper disable All

namespace MyTelegram.Schema.Phone;

///<summary>
/// Refuse or end running call
/// <para>Possible errors</para>
/// Code Type Description
/// 400 CALL_ALREADY_ACCEPTED The call was already accepted.
/// 500 CALL_OCCUPY_FAILED The call failed because the user is already making another call.
/// 400 CALL_PEER_INVALID The provided call peer object is invalid.
/// See <a href="https://corefork.telegram.org/method/phone.discardCall" />
///</summary>
[TlObject(0xb2cbc1c0)]
public sealed class RequestDiscardCall : IRequest<MyTelegram.Schema.IUpdates>
{
    public uint ConstructorId => 0xb2cbc1c0;
    ///<summary>
    /// Flags, see <a href="https://corefork.telegram.org/mtproto/TL-combinators#conditional-fields">TL conditional fields</a>
    ///</summary>
    public int Flags { get; set; }

    ///<summary>
    /// Whether this is a video call
    /// See <a href="https://corefork.telegram.org/type/true" />
    ///</summary>
    public bool Video { get; set; }

    ///<summary>
    /// The phone call
    /// See <a href="https://corefork.telegram.org/type/InputPhoneCall" />
    ///</summary>
    public MyTelegram.Schema.IInputPhoneCall Peer { get; set; }

    ///<summary>
    /// Call duration
    ///</summary>
    public int Duration { get; set; }

    ///<summary>
    /// Why was the call discarded
    /// See <a href="https://corefork.telegram.org/type/PhoneCallDiscardReason" />
    ///</summary>
    public MyTelegram.Schema.IPhoneCallDiscardReason Reason { get; set; }

    ///<summary>
    /// Preferred libtgvoip relay ID
    ///</summary>
    public long ConnectionId { get; set; }

    public void ComputeFlag()
    {
        if (Video) { Flags = Flags.SetBit(0); }

    }

    public void Serialize(IBufferWriter<byte> writer)
    {
        ComputeFlag();
        writer.Write(ConstructorId);
        writer.Write(Flags);
        writer.Write(Peer);
        writer.Write(Duration);
        writer.Write(Reason);
        writer.Write(ConnectionId);
    }

    public void Deserialize(ref ReadOnlyMemory<byte> buffer)
    {
        Flags = buffer.ReadInt32();
        if (Flags.IsBitSet(0)) { Video = true; }
        Peer = buffer.Read<MyTelegram.Schema.IInputPhoneCall>();
        Duration = buffer.ReadInt32();
        Reason = buffer.Read<MyTelegram.Schema.IPhoneCallDiscardReason>();
        ConnectionId = buffer.ReadInt64();
    }
}
